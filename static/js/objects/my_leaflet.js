"use strict";

function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}
Dropzone.autoDiscover = false;

// Vylnaerability Dropzone
var previewTemplateVulnerability, dropzoneVulnerability, dropzonePreviewNodeVulnerability = document.querySelector("#dropzone-preview-list"),
    inputMultipleElements = (
        dropzonePreviewNodeVulnerability.id = "",
        dropzonePreviewNodeVulnerability && (previewTemplateVulnerability = dropzonePreviewNodeVulnerability.parentNode.innerHTML,
            dropzonePreviewNodeVulnerability.parentNode.removeChild(dropzonePreviewNodeVulnerability),
            dropzoneVulnerability = new Dropzone("#dropzone_vulnerability", {
                url: "/url/",
                method: "post",
                autoProcessQueue: false,
                maxFiles: 10,
                capture: "camera",
                previewTemplate: previewTemplateVulnerability,
                previewsContainer: "#dropzone-preview"
            })));

dropzoneVulnerability.on("addedfile", file => {
  console.log("A file has been added");
  console.log(dropzoneVulnerability.files);
});
// Vylnaerability Dropzone end

// Encounter Dropzone
var previewTemplateEncounter, dropzoneEncounter, dropzonePreviewNodeEncounter = document.querySelector("#dropzone-preview-list-encounter"),
    inputMultipleElements = (
        dropzonePreviewNodeEncounter.id = "",
        dropzonePreviewNodeEncounter && (previewTemplateEncounter = dropzonePreviewNodeEncounter.parentNode.innerHTML,
            dropzonePreviewNodeEncounter.parentNode.removeChild(dropzonePreviewNodeEncounter),
            dropzoneEncounter = new Dropzone("#dropzone_encounter", {
                url: "/url/",
                method: "post",
                autoProcessQueue: false,
                maxFiles: 10,
                capture: "camera",
                previewTemplate: previewTemplateEncounter,
                previewsContainer: "#dropzone-preview-encounter"
            })));

dropzoneEncounter.on("addedfile", file => {
    console.log("A file has been added");
    console.log(dropzoneEncounter.files);
});
// Encounter Dropzone end



// const fileInput = document.getElementById("encounter_photo_input");
// const dropzonePreview = document.getElementById("dropzone_preview_encounter");
// let encounter_file = '';
//
// function removeListItem_encounter(listItem) {
//     dropzonePreview.removeChild(listItem);
// }

// fileInput.addEventListener("change", function() {
//     dropzonePreview.innerHTML = "";
//
//     const selectedFiles = fileInput.files;
//     encounter_file = fileInput.files;
//     console.log(selectedFiles);
//
//     for (let i = 0; i < selectedFiles.length; i++) {
//         const listItem = document.createElement("li");
//         listItem.classList.add("mt-2", "dz-processing", "dz-image-preview", "dz-success", "dz-complete");
//
//         const imageContainer = document.createElement("div");
//         imageContainer.classList.add("border", "rounded");
//
//         const flexContainer = document.createElement("div");
//         flexContainer.classList.add("d-flex", "p-2");
//
//         const imageDiv = document.createElement("div");
//         imageDiv.classList.add("flex-shrink-0", "me-3");
//         const imageThumbnail = document.createElement("div");
//         imageThumbnail.classList.add("avatar-sm", "bg-light", "rounded");
//         const imageElement = document.createElement("img");
//         imageElement.setAttribute("data-dz-thumbnail", "");
//         imageElement.classList.add("img-fluid", "rounded", "d-block");
//         imageElement.src = URL.createObjectURL(selectedFiles[i]);
//         imageThumbnail.appendChild(imageElement);
//         imageDiv.appendChild(imageThumbnail);
//
//         const textContainer = document.createElement("div");
//         textContainer.classList.add("flex-grow-1", "pt-1");
//
//         const fileNameHeader = document.createElement("h5");
//         fileNameHeader.classList.add("fs-14", "mb-1");
//         fileNameHeader.setAttribute("data-dz-name", "");
//         fileNameHeader.textContent = selectedFiles[i].name;
//
//         const fileSize = document.createElement("p");
//         fileSize.classList.add("fs-13", "text-muted", "mb-0");
//         fileSize.setAttribute("data-dz-size", "");
//         fileSize.innerHTML = `<strong>${(selectedFiles[i].size / 1024).toFixed(1)} MB</strong>`;
//
//         const errorMessage = document.createElement("strong");
//         errorMessage.classList.add("error", "text-danger");
//         errorMessage.setAttribute("data-dz-errormessage", "");
//
//         textContainer.appendChild(fileNameHeader);
//         textContainer.appendChild(fileSize);
//         textContainer.appendChild(errorMessage);
//
//         const deleteButtonDiv = document.createElement("div");
//         deleteButtonDiv.classList.add("flex-shrink-0", "ms-3");
//         const deleteButton = document.createElement("button");
//         deleteButton.setAttribute("data-dz-remove", "");
//         deleteButton.classList.add("btn", "btn-sm", "btn-danger");
//         deleteButton.textContent = "Delete";
//
//         deleteButton.addEventListener("click", function(event) {
//             event.preventDefault();
//             removeListItem_encounter(listItem);
//         });
//
//         deleteButtonDiv.appendChild(deleteButton);
//
//         flexContainer.appendChild(imageDiv);
//         flexContainer.appendChild(textContainer);
//         flexContainer.appendChild(deleteButtonDiv);
//
//         imageContainer.appendChild(flexContainer);
//         listItem.appendChild(imageContainer);
//
//         dropzonePreview.appendChild(listItem);
//     }
// });

function generateRandomString() {
    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    let randomString = '';

    for (let i = 0; i < 4; i++) {
        const randomIndex = Math.floor(Math.random() * letters.length);
        randomString += letters[randomIndex];
    }

    return randomString;
}

const getMeta = (url, cb) => {
  const img = new Image();
  img.onload = () => cb(null, img);
  img.onerror = (err) => cb(err);
  img.src = url;
};

// Use like:


let rat_svg = `
    <path fill-rule="evenodd" clip-rule="evenodd" d="M247.976 0.2486C222.131 2.9546 195.032 10.0096 159.075 23.3956C144.747 28.7296 144.123 28.8696 142.871 27.0396C138.53 20.6956 136.503 18.4996 132.476 15.7786C113.376 2.8736 77.6403 15.8886 63.9993 40.7176C61.4523 45.3536 61.0183 47.2206 60.9993 53.6366C60.9863 57.7616 61.3473 62.3136 61.8013 63.7536C62.5853 66.2386 62.0593 66.7426 51.3013 73.8316C25.4203 90.8866 11.3093 105.133 3.18826 122.407C0.471256 128.189 0.0212558 130.268 0.000255849 137.161C-0.0307442 147.339 2.75225 153.363 10.0343 158.883C15.7413 163.209 21.1353 165.197 30.9763 166.6C35.4163 167.233 103.609 167.61 217.476 167.632C412.326 167.67 403.188 167.417 414.353 173.074C421.417 176.655 424.995 180.03 427.898 185.857C435.386 200.882 425.891 216.139 405.14 222.429C400.776 223.751 389.936 224.082 335.143 224.565L270.31 225.137L267.414 228.379C265.821 230.163 264.225 232.791 263.866 234.22C262.834 238.33 265.128 244.252 268.751 246.837L271.976 249.137L335.976 249.098C398.955 249.06 400.103 249.024 407.909 246.842C428.52 241.082 442.082 231.298 449.925 216.532C459.532 198.442 455.992 178.063 440.569 162.677C428.582 150.719 412.011 144.086 391.243 142.934L380.511 142.339L380.04 139.238C379.782 137.532 379.29 131.653 378.947 126.174C377.041 95.7026 369.195 68.4576 357.083 50.2546C339.913 24.4496 315.736 7.9776 286.447 2.1286C278.911 0.624605 255.377 -0.5264 247.976 0.2486ZM105.226 103.192C112.309 111.24 100.676 121.738 92.7793 114.423C86.7913 108.876 91.8723 98.7866 99.9763 100.136C101.626 100.41 103.988 101.785 105.226 103.192Z" fill="white"/>
`;
// let rat_svg = `
// <path fill-rule="evenodd" clip-rule="evenodd" d="M77.778 0.619815C71.598 1.76582 58.44 6.66382 49.278 11.2298C26.866 22.3978 15.279 32.4968 7.87004 47.3208C2.69804 57.6678 0.840037 64.9168 0.135037 77.4998C-1.46496 106.016 11.248 137.53 33.236 159.555C47.316 173.658 64.095 183.036 81.42 186.486C84.891 187.177 84.464 187.736 113.59 144.38L123.747 129.26L121.415 122.38C116.193 106.972 115.64 98.6368 117.238 59.4858C117.939 42.3238 117.811 38.2638 116.343 30.9858C112.199 10.4358 103.252 1.02782 87.278 0.421817C83.428 0.275817 79.153 0.364815 77.778 0.619815ZM338.599 1.33082C320.783 6.37182 312.869 28.9688 315.972 65.9358C318.256 93.1478 317.409 105.686 312.212 121.606L309.676 129.374L328.892 157.937C339.46 173.647 348.215 186.644 348.347 186.821C348.817 187.451 362.064 183.744 368.114 181.288C404.018 166.714 431.296 127.315 433.393 86.9998C434.83 59.3858 423.525 35.6048 402.272 21.5308C378.447 5.75282 352.292 -2.54518 338.599 1.33082ZM129.438 62.2518C128.435 88.6988 128.668 103.898 130.173 110.296C130.923 113.484 131.733 116.288 131.973 116.528C132.212 116.768 135.979 113.77 140.343 109.865C144.707 105.961 151.108 100.742 154.567 98.2678C160.495 94.0268 160.776 93.6458 159.467 91.6338C158.703 90.4598 152.323 80.2748 145.289 68.9998C138.254 57.7248 131.958 47.7128 131.296 46.7518C130.327 45.3448 129.965 48.3698 129.438 62.2518ZM288.68 68.0318C280.652 80.9388 273.799 92.0038 273.451 92.6208C273.082 93.2758 275.403 95.3358 279.043 97.5828C282.466 99.6958 288.952 104.962 293.455 109.285L301.644 117.147L302.811 113.323C304.426 108.037 305.022 84.0308 304.072 62.5318L303.278 44.5628L288.68 68.0318ZM184.585 98.0358C163.011 103.342 145.423 116.498 132.766 136.798C129.44 142.134 117.287 160.45 105.76 177.5C92.744 196.753 83.598 211.342 81.624 216C69.454 244.709 72.092 276.463 88.74 301.679C94.186 309.928 104.396 320.813 111.276 325.705L114.275 327.837L111.776 328.384C83.758 334.521 64.96 340.374 51.434 347.171C36.883 354.483 23.553 364.775 22.332 369.64C21.012 374.9 25.198 380 30.834 380C31.913 380 35.416 377.591 38.619 374.646C56.036 358.634 88.854 347.407 138.011 340.645C141.523 340.162 141.888 340.375 144.203 344.257C145.556 346.526 146.352 348.929 145.971 349.596C145.59 350.263 141.678 353.388 137.278 356.54C110.46 375.75 84.52 400.038 74.03 415.76C68.567 423.948 63.778 435.066 63.778 439.558C63.778 443.942 68.148 448 72.871 448C76.132 448 79.427 443.829 80.191 438.732C82.465 423.565 116.955 389.459 159.601 360.206L169.924 353.125L174.481 356.603C182.936 363.057 190.584 364.672 197.078 361.375C202.975 358.381 202.976 358.371 198.349 351.181C189.875 338.016 189.223 335.464 193.292 331.395C195.251 329.436 196.631 328.949 199.542 329.19C202.995 329.477 203.657 330.086 208.278 337.231C211.028 341.484 213.526 344.971 213.829 344.981C214.132 344.992 216.575 341.369 219.258 336.932C221.94 332.494 225.055 328.219 226.179 327.432C230.756 324.226 236.929 326.769 238.354 332.447C239.03 335.141 235.053 343.124 228.401 352.426C226.463 355.136 225.111 357.73 225.396 358.191C225.681 358.652 227.665 359.922 229.806 361.014C237.735 365.06 246.83 362.773 255.66 354.514L260.578 349.913L269.428 356.1C293.321 372.803 319.667 394.676 333.436 409.241C343.764 420.165 350.423 430.093 352.818 438.133C355.581 447.412 360.052 450.298 365.619 446.399C369.092 443.966 369.818 440.935 368.381 434.857C363.794 415.448 338.807 388.136 295.937 355.671C289.524 350.815 284.123 346.413 283.934 345.889C283.745 345.365 284.318 343.825 285.207 342.468C287.305 339.266 290.304 339.269 309.34 342.494C350.816 349.52 379.527 360.512 395.985 375.666C401.232 380.497 404.152 381.067 408.031 378.016C414.062 373.272 412.157 367.758 401.645 359.533C384.843 346.386 360.574 336.636 327.289 329.659L316.561 327.411L321.92 323.26C334.094 313.831 342.871 302.981 349.856 288.723C356.876 274.396 359.151 263.504 358.516 247.269C357.604 223.956 354.856 217.985 323.333 170.81C310.355 151.39 298.284 133.277 296.508 130.56C286.161 114.735 266.226 101.652 246.138 97.5028C234.818 95.1648 194.855 95.5108 184.585 98.0358ZM167.706 229.463C169.263 230.268 170.815 231.654 171.157 232.545C171.498 233.435 171.778 242.616 171.778 252.947C171.778 270.435 171.635 271.912 169.705 274.365C166.922 277.904 161.674 277.986 158.233 274.545C155.803 272.116 155.778 271.899 155.778 253.593C155.778 234.209 156.35 231.006 160.142 229.17C163.117 227.729 164.453 227.781 167.706 229.463ZM274.915 230.983L277.897 233.965L277.588 253.573C277.284 272.798 277.232 273.218 274.917 275.09C271.759 277.645 266.969 277.528 264.092 274.826C261.824 272.694 261.778 272.258 261.778 252.78C261.778 233.016 261.791 232.896 264.233 230.455C267.555 227.132 271.247 227.315 274.915 230.983Z" fill="white"/>`

var floor_init = null;

var cfg = {
    // radius should be small ONLY if scaleRadius is true (or small radius is intended)
    // if scaleRadius is false it will be the constant radius used in pixels
    "radius": null,
    // "maxOpacity": 0.3,
    // scales the radius based on map zoom
    "scaleRadius": true,
    // if set to false the heatmap uses the global maximum for colorization
    // if activated: uses the data maximum within the current map boundaries
    //   (there will always be a red spot with useLocalExtremas true)
    "useLocalExtrema": false,
    // which field name in your data represents the latitude - default "lat"
    latField: 'lat',
    // which field name in your data represents the longitude - default "lng"
    lngField: 'lng',
    // which field name in your data represents the data value - default "value"
    valueField: 'count',
    // backgroundColor: 'rgba(10,179,140,0.5)',
    blur: 1,
    gradient: {
        '.0': 'rgba(28,114,18,0.5)',
        '.05': 'rgba(26,255,0,0.5)',
        '.1': 'rgba(208,255,0,0.5)',
        '.2': 'rgba(230,255,0,0.5)',
        '.3': 'rgba(247,255,0,0.5)',
        '.4': 'rgba(255,234,0,0.5)',
        '.6': 'rgba(255,213,0,0.5)',
        '.7': 'rgba(255,183,0,0.5)',
        '.8': 'rgba(255,153,0,0.5)',
        '.9': 'rgba(255,43,0,0.5)',

    },
};

getMeta(floor_plan.url, (err, img) => {
  cfg.radius = (img.naturalWidth + img.naturalHeight) / 25;
});
// function get_vulnarability_icon(color, type) {
//     const vulnerability_icon = {
//         techical: `<rect xmlns="http://www.w3.org/2000/svg" x="20" y="20" width="460" height="460" rx="230" fill="white"/>
//                    <path fill-rule="evenodd" clip-rule="evenodd" d="M382.34 108.481C381.126 109.488 374.945 114.561 368.604 119.755C362.263 124.949 353.432 132.754 348.98 137.1C336.844 148.945 334.428 151.105 333.649 150.807C333.224 150.645 331.556 151.9 329.369 154.029L325.785 157.516L321.796 153.561C318.495 150.288 317.541 149.605 316.259 149.605C315.406 149.605 314.348 149.965 313.907 150.405C313.298 151.012 312.967 151.068 312.535 150.638C312.103 150.207 296.923 165.067 249.644 212.194C215.052 246.677 186.561 274.697 185.61 275.169C184.524 275.71 183.718 276.563 183.407 277.503C183.137 278.318 179.513 282.829 175.353 287.529C171.193 292.227 164.018 300.321 159.409 305.515C154.799 310.709 150.863 315.404 150.661 315.947C149.793 318.285 151.666 320.768 154.297 320.768C155.996 320.768 156.496 319.971 155.492 318.865C154.429 317.694 154.499 317.221 155.934 315.878L157.161 314.729L158.409 315.898C159.447 316.87 159.799 316.966 160.494 316.469C162.313 315.168 162.666 315.265 165.142 317.732C167.273 319.857 167.542 320.328 166.998 320.982C166.107 322.052 165.516 321.943 163.916 320.416C162.763 319.315 162.369 319.182 161.623 319.647C160.861 320.121 160.438 319.916 158.855 318.299C157.422 316.837 156.834 316.517 156.337 316.928C155.34 317.753 155.542 318.376 157.428 320.302C158.959 321.864 159.077 322.153 158.41 322.705C157.327 323.601 157.457 324.19 159.118 325.898L160.585 327.407L140.598 347.243C118.429 369.247 118.199 369.428 112.517 369.404C107.649 369.384 103.63 366.817 101.068 362.091C100.101 360.309 100.012 359.452 100.056 352.433L100.105 344.731H97.2853H94.4659L94.1289 351.21C93.7428 358.641 94.1441 361.113 96.4342 365.395C99.727 371.554 105.645 375.164 112.517 375.206C116.977 375.233 119.94 374.239 124.046 371.336C125.665 370.192 135.483 360.772 145.864 350.402L164.739 331.547L166.336 333.09C167.918 334.618 167.941 334.624 168.968 333.697C169.944 332.816 170.04 332.811 170.624 333.607C170.965 334.072 171.721 337.904 172.303 342.124C172.885 346.343 173.459 349.893 173.58 350.013C174.254 350.685 175.311 349.479 175.304 348.047C175.286 344.493 173.415 333.41 172.632 332.219C171.978 331.224 171.934 330.827 172.411 330.254C172.898 329.669 172.766 329.283 171.707 328.181C170.21 326.623 170.104 326.028 171.167 325.148C171.816 324.612 172.324 324.908 174.599 327.147L177.268 329.775L175.702 331.385C174.586 332.534 174.288 333.146 174.664 333.521C175.041 333.897 175.637 333.581 176.744 332.42L178.296 330.793L179.165 331.835C179.644 332.408 181.328 337.219 182.909 342.526C185.275 350.471 186.05 352.456 187.299 353.776C188.782 355.344 191.505 356.448 193.955 356.475C195.552 356.493 198.893 358.033 199.886 359.211C200.316 359.719 204.939 366.957 210.16 375.295C215.382 383.633 220.58 391.666 221.712 393.145C224.293 396.518 230.237 402.231 233.392 404.372L235.79 406L236.693 404.83C237.189 404.186 237.595 403.549 237.595 403.415C237.596 403.28 236.415 402.327 234.97 401.296C230.66 398.219 228.473 395.658 227.382 392.412C226.84 390.798 223.926 384.416 220.906 378.23C201.095 337.64 199.428 333.972 200.783 333.972C202.186 333.972 233.97 335.965 236.636 336.22C238.39 336.388 243.026 337.187 246.938 337.997C263.861 341.497 276.056 338.592 279.563 330.226C281.076 326.618 280.344 326.399 273.607 328.447C269.891 329.577 268.37 329.771 263.127 329.781C256.208 329.795 253.875 329.302 245.885 326.138C240.433 323.979 235.837 322.899 225.31 321.302C221.643 320.746 217.67 319.934 216.479 319.496C213.935 318.561 206.045 318.12 204.699 318.837C204.186 319.111 203.766 319.158 203.766 318.942C203.766 318.177 213.853 308.542 214.654 308.542C215.514 308.542 217.503 306.354 217.503 305.409C217.503 305.103 245.484 276.988 279.685 242.932C344.91 177.978 343.093 179.899 343.093 175.909C343.093 175.188 341.708 173.423 339.058 170.767L335.023 166.724L338.322 163.409C340.137 161.587 341.621 159.678 341.621 159.167C341.621 158.064 344.306 155.049 356.147 142.858C361.033 137.827 369.511 128.32 374.988 121.73C380.465 115.141 385.245 109.4 385.61 108.972C386.173 108.313 386.143 108.08 385.41 107.424C384.614 106.711 384.378 106.793 382.34 108.481ZM253.86 211.904L196.891 268.695L202.291 274.061C205.261 277.013 207.691 279.657 207.691 279.937C207.691 280.218 206.088 282.034 204.128 283.975L200.565 287.503L194.562 281.601C191.26 278.355 188.558 275.567 188.558 275.406C188.558 274.711 309.918 154.552 310.35 154.818C310.614 154.98 285.193 180.669 253.86 211.904ZM337.885 182.278C338.02 182.495 310.82 209.896 277.442 243.168L216.755 303.662L210.73 297.699L204.705 291.734L208.519 287.911L212.333 284.086L217.865 289.586L223.398 295.085L280.179 238.484C311.409 207.353 337.113 181.882 337.299 181.882C337.486 181.882 337.749 182.06 337.885 182.278ZM192.173 290.024C194.143 291.989 194.169 292.058 193.104 292.451C192.204 292.783 192.06 293.111 192.298 294.296C192.575 295.674 192.514 295.735 190.941 295.66C189.285 295.582 189.123 295.839 189.604 297.783C189.742 298.347 189.405 298.48 188.15 298.358C186.568 298.204 186.519 298.252 186.662 299.825C186.774 301.056 186.635 301.407 186.09 301.271C184.17 300.789 183.898 300.957 183.973 302.576C184.044 304.105 183.966 304.183 182.501 304.043C181.024 303.903 180.96 303.97 181.084 305.526C181.212 307.125 181.184 307.149 179.629 306.809C178.756 306.618 177.651 306.218 177.172 305.919C176.464 305.479 176.056 305.622 174.988 306.687C173.85 307.822 173.763 308.104 174.342 308.799C175.407 310.08 175.269 311.223 174.038 311.3C172.347 311.404 169.755 308.464 169.811 306.504C169.85 305.116 170.946 303.831 178.377 296.457C185.969 288.923 187.074 288.003 188.521 288.003C189.771 288.003 190.613 288.469 192.173 290.024ZM201.98 299.781C203.294 300.934 204.257 302.202 204.257 302.78C204.257 303.33 203.469 306.777 202.506 310.44C201.074 315.888 200.481 317.383 199.254 318.655L197.754 320.21L195.929 319.006C194.926 318.344 192.763 317.53 191.122 317.196C188.833 316.731 187.675 316.161 186.141 314.747C183.839 312.624 183.572 311.716 185.382 312.169C186.491 312.447 186.59 312.359 186.331 311.33C185.936 309.761 187.137 308.762 188.527 309.503C189.315 309.924 189.539 309.899 189.539 309.39C189.539 309.032 189.313 308.512 189.037 308.237C188.695 307.896 188.848 307.454 189.519 306.849C190.331 306.116 190.633 306.07 191.259 306.588C192.237 307.397 192.716 306.914 192.072 305.767C191.332 304.45 192.732 302.999 194.059 303.707C195.271 304.354 195.764 303.913 194.938 302.921C194.419 302.297 194.464 301.996 195.2 301.186C195.807 300.517 196.25 300.364 196.592 300.706C196.868 300.981 197.389 301.206 197.749 301.206C198.259 301.206 198.284 300.982 197.863 300.197C197.46 299.448 197.471 299.007 197.905 298.485C198.811 297.398 199.522 297.624 201.98 299.781ZM182.671 317.42C182.671 318.092 181.368 317.892 180.726 317.122C179.781 315.986 180.64 315.174 181.739 316.166C182.252 316.629 182.671 317.193 182.671 317.42Z" fill="black"/>
//                    <rect xmlns="http://www.w3.org/2000/svg" x="20" y="20" width="460" height="460" rx="230" stroke="${color}" stroke-width="50"/>`,
//
//         sanitary: `<rect xmlns="http://www.w3.org/2000/svg" x="20" y="20" width="460" height="460" rx="230" fill="white"/>
//                    <path fill-rule="evenodd" clip-rule="evenodd" d="M307.659 76.3702C307.031 77.4742 306.917 96.4502 307.07 174.118C307.174 227.125 307.087 271.039 306.878 271.704C306.602 272.576 305.958 272.914 304.568 272.916C303.507 272.917 301.78 273.445 300.73 274.088C298.56 275.418 297.489 278.967 297.489 284.833C297.489 287.918 297.364 288.213 295.823 288.774C292.548 289.966 291.089 290.916 288.384 293.618C285.03 296.968 283.749 299.593 282.648 305.378C282.183 307.824 281.405 311.042 280.92 312.53C280.167 314.841 277.142 324.682 274.941 331.983C274.587 333.155 274.101 334.663 273.86 335.332C273.619 336.002 273.136 337.51 272.785 338.682C271.546 342.825 266.451 359.189 263.873 367.303C260.256 378.686 258.589 384.877 258.974 385.503C260.14 387.399 266.873 389.243 278.404 390.825C288.505 392.21 332.147 392.438 340.506 391.148C355.828 388.786 361.34 387.253 362.151 385.129C362.492 384.235 362.259 383.353 358.964 373.088C357.888 369.739 356.393 364.943 355.64 362.431C354.888 359.919 353.661 355.946 352.915 353.601C352.168 351.257 350.941 347.283 350.189 344.771C348.571 339.371 345.287 328.894 342.924 321.586C340.683 314.66 338.877 307.942 338.357 304.609C337.345 298.116 332.756 292.106 326.714 289.362L323.542 287.92L323.527 284.223C323.497 276.582 321.527 273.182 316.904 272.791L314.756 272.609L314.454 175.479C314.22 100.69 313.98 77.9638 313.408 76.6747C312.803 75.31 312.274 75 310.552 75C308.994 75 308.232 75.3605 307.659 76.3702ZM174.308 246.307C172.294 247.522 171.006 249.231 170.369 251.536C169.578 254.397 169.583 270.383 170.376 277.439C171.301 285.659 172.768 296.033 173.397 298.795C173.701 300.134 174.115 302.356 174.316 303.733L174.68 306.236L162.978 306.569C154.251 306.817 150.55 307.161 148.419 307.922C145.425 308.992 141.936 312.108 140.671 314.843C140.262 315.729 139.708 316.894 139.442 317.431C137.97 320.395 134.747 335.652 132.122 352.079C131.775 354.256 131.239 357.028 130.932 358.239C130.625 359.451 130.374 361.159 130.374 362.037C130.374 362.914 130.101 364.8 129.767 366.229C129.204 368.637 127.082 380.605 126.328 385.624L126 387.808L145.605 388.211C156.389 388.434 180.31 388.615 198.765 388.616L232.318 388.617L231.919 386.333C231.699 385.078 230.714 378.432 229.73 371.566C228.746 364.7 227.798 358.26 227.624 357.255C227.45 356.25 227.06 353.647 226.757 351.47C226.455 349.293 225.474 342.579 224.578 336.55C223.683 330.522 222.758 323.945 222.525 321.935C221.727 315.079 218.346 310.758 211.791 308.217C208.689 307.014 206.698 306.788 196.413 306.469L184.599 306.102L184.671 303.971C184.709 302.798 185.313 297.318 186.013 291.791C187.904 276.835 188.537 269.107 188.537 260.967C188.537 248.688 186.626 245.478 179.356 245.546C177.241 245.566 174.969 245.908 174.308 246.307ZM182.288 254.142C183.26 255.059 183.69 256.152 183.69 257.701C183.69 260.516 182.106 262.049 179.107 262.134C177.352 262.184 176.549 261.822 175.378 260.454C171.522 255.948 177.967 250.062 182.288 254.142ZM223.453 376.559C224.306 377.417 224.348 377.757 223.699 378.542C223.002 379.387 218.096 379.473 178.623 379.334C135.379 379.182 134.323 379.15 134.103 378C133.558 375.158 133.354 375.17 179.267 375.353C218.937 375.51 222.506 375.608 223.453 376.559Z" fill="black"/>
//                    <rect xmlns="http://www.w3.org/2000/svg" x="20" y="20" width="460" height="460" rx="230" stroke="${color}" stroke-width="50"/>`,
//
//         personal: `<rect xmlns="http://www.w3.org/2000/svg" x="20" y="20" width="460" height="460" rx="230" fill="white"/>
//                    <path fill-rule="evenodd" clip-rule="evenodd" d="M265.293 68.7637C264.439 69.217 263.741 69.9993 263.741 70.5016C263.741 71.0107 264.427 71.4981 265.293 71.6037C268.197 71.9576 273.045 73.7228 276.78 75.7866C286.264 81.0269 293.086 90.4675 295.383 101.527C295.812 103.594 296.065 103.881 300.238 107.053C304.675 110.425 307.292 113.668 308.822 117.695C310.23 121.401 310.289 123.804 309.071 127.818C306.985 134.693 299.741 143.917 293.057 148.208L289.849 150.267L257.858 150.578C226.577 150.881 225.805 150.918 223.073 152.242C219.963 153.748 215.592 158.035 212.559 162.553C207.067 170.733 201.872 186.263 199.224 202.422C195.619 224.407 194.96 233.657 194.886 263.269C194.827 287.095 194.897 288.864 195.993 290.898C199.906 298.165 209.456 299.95 215.135 294.478C218.773 290.972 218.689 291.561 218.979 267.493C219.363 235.465 220.914 217.167 224.717 199.783C225.5 196.2 225.932 195.282 226.834 195.282C228.613 195.282 228.79 196.222 227.798 200.395C224.169 215.643 222.417 236.312 222.076 267.902L221.832 290.541L219.647 293.832L217.461 297.124L217.628 357.807L217.795 418.491L219.401 421.913C221.723 426.865 225.449 430.255 230.368 431.892C239.665 434.986 249.059 430.954 253.635 421.906L255.048 419.112L255.359 348.641L255.669 278.17L258.206 277.984C259.81 277.867 261.007 278.115 261.458 278.659C261.986 279.295 262.215 297.888 262.336 349.626L262.499 419.733L264.031 422.732C269.61 433.654 284.196 436.433 293.245 428.297C294.913 426.797 296.734 424.676 297.293 423.583C300.167 417.964 300.049 423.468 300.056 294.221L300.063 172.434L302.391 171.219C309.506 167.506 318.503 159.431 324.205 151.64C332.136 140.804 335.615 128.118 333.866 116.411C331.07 97.6934 315.163 83.1522 285.162 71.8868C275.263 68.1695 268.432 67.096 265.293 68.7637ZM251.503 74.8472C247.064 75.5954 239.74 79.4095 235.744 83.0547C228.205 89.9304 224.675 97.9008 224.675 108.047C224.676 117.976 227.734 125.479 234.542 132.261C242.92 140.607 253.812 143.905 265.488 141.632C277.364 139.321 287.819 129.851 291.255 118.291C291.611 117.096 292.23 114.162 292.631 111.772C294.141 102.787 290.093 91.5143 282.699 84.1214C274.547 75.9691 263.802 72.7747 251.503 74.8472Z" fill="black"/>
//                    <path fill-rule="evenodd" clip-rule="evenodd" d="M158.647 83.685L154.161 88.2008L163.16 97.1844C168.11 102.125 172.16 106.448 172.16 106.79C172.16 107.131 168.074 111.504 163.08 116.506L154 125.601L158.514 130.018C160.997 132.447 163.194 134.435 163.396 134.435C163.598 134.435 167.887 130.317 172.928 125.285L182.094 116.134L191.404 125.428L200.713 134.721L205.356 130.109L210 125.497L200.658 116.204L191.316 106.911L200.679 97.5333L210.042 88.1554L205.377 83.5217L200.713 78.8887L191.551 88.035C186.512 93.0654 182.059 97.1813 181.656 97.1813C181.253 97.1813 180.542 96.6927 180.078 96.0947C179.613 95.4968 175.61 91.4443 171.182 87.0881L163.133 79.1687L158.647 83.685Z" fill="#FF0000"/>
//                    <rect xmlns="http://www.w3.org/2000/svg" x="20" y="20" width="460" height="460" rx="230" stroke="${color}" stroke-width="50"/>`,
//
//         // pests:    `<path fill-rule="evenodd" clip-rule="evenodd" d="M124.914 74.6629C120.731 75.5503 117.959 77.3464 116.462 80.139C115.016 82.8389 114.791 87.0494 115.973 89.2888C116.408 90.1131 120.82 95.5747 125.776 101.426C130.733 107.276 135.227 112.623 135.764 113.308C136.658 114.448 135.819 115.474 125.797 125.49C119.778 131.506 114.672 136.427 114.452 136.427C114.23 136.427 108.569 131.798 101.871 126.14C95.1733 120.482 88.9104 115.657 87.9538 115.418C85.2773 114.747 81.0796 115.543 78.8191 117.15C75.3167 119.638 74.2521 123.73 74.3381 134.368C74.3966 141.524 74.7507 144.883 75.8964 149.124C78.8996 160.241 84.657 169.872 92.8998 177.567C100.914 185.049 109.891 189.902 120.457 192.466C126.455 193.921 140.081 194.083 146.017 192.769L150.376 191.805L173.354 214.729L196.332 237.652L217.131 216.895L237.93 196.139L214.96 173.207L191.99 150.276L192.956 145.925C194.272 140.001 194.11 126.403 192.652 120.416C187.324 98.5444 170.744 81.5864 149.222 75.9978C143.004 74.3836 129.684 73.652 124.914 74.6629ZM384.737 77.0568C369.935 85.9424 336.92 107.486 335.822 108.975C335.053 110.019 333.716 114.986 332.405 121.672L330.252 132.653L267.072 195.796L203.891 258.939L222.292 277.293L240.692 295.647L303.809 232.656L366.924 169.665L378.077 167.463C384.885 166.119 389.899 164.768 390.948 163.994C392.44 162.894 414.045 129.917 422.931 115.174C426.14 109.85 426.66 107.317 425.288 103.701C424.342 101.21 399.632 76.3931 396.729 75.0178C392.991 73.2478 390.328 73.7 384.737 77.0568ZM156.629 251.372C154.161 252.443 151.851 255.725 151.219 259.06C150.66 262.015 151.919 265.502 154.404 267.878L156.46 269.843L121.139 305.224C98.6606 327.741 84.7327 342.221 82.8305 345.052C72.5728 360.317 71.1561 379.65 79.0818 396.215C85.421 409.465 97.8643 419.739 112.43 423.748C118.502 425.419 132.339 425.417 138.447 423.744C144.384 422.117 149.33 419.856 154.5 416.402C157.213 414.591 172.179 400.247 194.266 378.289L229.683 343.081L232.206 345.404C235.537 348.47 238.854 349.084 242.935 347.387C244.646 346.676 246.642 345.295 247.371 344.319C248.894 342.278 249.667 337.795 248.982 334.983C248.659 333.659 235.86 320.401 208.151 292.687C185.952 270.485 166.955 251.878 165.933 251.337C163.599 250.102 159.521 250.117 156.629 251.372ZM282.636 282.611L262.013 303.201L284.944 326.093L307.875 348.986L306.971 353.03C305.688 358.768 305.86 373.122 307.281 378.92C312.639 400.779 329.023 417.553 350.718 423.39C354.967 424.533 358.333 424.887 365.503 424.945C376.163 425.031 380.263 423.968 382.757 420.473C384.367 418.217 385.164 414.028 384.492 411.357C384.252 410.402 379.418 404.152 373.748 397.468C368.079 390.783 363.44 385.134 363.44 384.913C363.44 384.692 368.372 379.597 374.4 373.59C384.443 363.581 385.464 362.75 386.605 363.647C387.291 364.185 392.881 368.865 399.029 374.048C405.175 379.231 410.997 383.67 411.965 383.913C414.661 384.589 418.854 383.798 421.121 382.186C424.623 379.698 425.688 375.606 425.602 364.968C425.544 357.812 425.189 354.453 424.044 350.212C418.186 328.528 401.422 312.219 379.484 306.863C373.674 305.445 359.291 305.273 353.542 306.553L349.489 307.456L326.718 284.739C314.193 272.244 303.792 262.022 303.602 262.022C303.413 262.022 293.978 271.287 282.636 282.611ZM175.533 320.354C179.854 322.983 181.618 328.305 179.787 333.181C178.83 335.728 125.898 388.702 122.601 390.411C113.745 395.003 104.287 385.717 108.869 376.927C110.514 373.772 162.635 321.632 165.727 320.05C168.58 318.589 172.85 318.722 175.533 320.354Z" fill="white"/>`,
//     };
//     return vulnerability_icon[type];
// }

function floors_dropdown_a() {
    var dropdown = '';
    for (var i = 0; i < floors.length; i++) {
        dropdown += `<a class="dropdown-item" href="/object/planL/${slug}/${floors[i].slug}">${floors[i].title}</a>`;
    }
    return dropdown;
}
function timestamp(str) {
    return new Date(str).getTime();
}

function formatDate(date) {
    var day = date.getDate();
    var month = date.getMonth() + 1;
    var year = date.getFullYear();

    if (day < 10) {
        day = '0' + day;
    }

    if (month < 10) {
        month = '0' + month;
    }

    return `${year}-${month}-${day}`;

}

function last30Days() {
    var date = new Date().getTime();
    return date - 30 * 24 * 60 * 60 * 1000;

}

function rangeSliderInit() {
    let dateValues = [
        document.getElementById('heatmap_date_from'),
        document.getElementById('heatmap_date_to')
    ];

    let max_date = new Date().getTime();
    var clickPipsSlider = document.getElementById('soft');
    var range = {
        min: timestamp(create_date),
        max: max_date,
    };

    noUiSlider.create(clickPipsSlider, {
        range: range,
        step: 24 * 1000,
        start: [last30Days(), max_date],
        format: wNumb({
            decimals: 0
        }),
    });
    dateValues[0].value = formatDate(new Date(last30Days()));
    dateValues[1].value = formatDate(new Date(range.max));
    get_ppas();
    clickPipsSlider.noUiSlider.on('change', function (values, handle) {
        console.log(handle);
        dateValues[handle].value = formatDate(new Date(+values[handle]));
        get_ppas();

    });

}

function get_vulnarability_icon(vulnerability) {
    if (vulnerability.criticality === 'Низький (2 місяці)') {
        if (vulnerability.category === 'Практика персоналу') {
            return `/static/images/vulnerability-icon/vulnerability_human_factor_dark_gray.svg`;
        } else if (vulnerability.category === 'Санітарний стан') {
            return `/static/images/vulnerability-icon/vulnerability_sanitary_condition_dark_gray.svg`;
        } else if (vulnerability.category === 'Технічний стан') {
            return `/static/images/vulnerability-icon/vulnerability_technical_condition_dark_gray.svg`;
        }
        return ``;
    } else if (vulnerability.criticality === 'Середній (місяць)') {
        if (vulnerability.category === 'Практика персоналу') {
            return `/static/images/vulnerability-icon/vulnerability_human_factor_yellow.svg`;
        } else if (vulnerability.category === 'Санітарний стан') {
            return `/static/images/vulnerability-icon/vulnerability_sanitary_condition_yellow.svg`;
        } else if (vulnerability.category === 'Технічний стан') {
            return `/static/images/vulnerability-icon/vulnerability_technical_condition_yellow.svg`;
        }
        return ``;
    } else if (vulnerability.criticality === 'Високий (5 днів)') {
        if (vulnerability.category === 'Практика персоналу') {
            return `/static/images/vulnerability-icon/vulnerability_human_factor_orange.svg`;
        } else if (vulnerability.category === 'Санітарний стан') {
            return `/static/images/vulnerability-icon/vulnerability_sanitary_condition_orange.svg`;
        } else if (vulnerability.category === 'Технічний стан') {
            return `/static/images/vulnerability-icon/vulnerability_technical_condition_orange.svg`;
        }
        return ``;
    } else {
        if (vulnerability.category === 'Практика персоналу') {
            return `/static/images/vulnerability-icon/vulnerability_human_factor_red.svg`;
        } else if (vulnerability.category === 'Санітарний стан') {
            return `/static/images/vulnerability-icon/vulnerability_sanitary_condition_red.svg`;
        } else if (vulnerability.category === 'Технічний стан') {
            return `/static/images/vulnerability-icon/vulnerability_technical_condition_red.svg`;
        }
        return ``;
    }
}

function get_encounter_icon(color, type) {
    const encounter_icon = {
        "FI": `<path fill-rule="evenodd" clip-rule="evenodd" d="M212.061 1.35727C158.04 3.96674 118.809 15.2147 84.7607 37.8561C51.7586 59.8007 27.6425 92.6533 14.0994 134.119C2.71405 168.974 -2.3441 227.028 1.03023 284.119C4.08811 335.825 10.0973 362.503 25.9011 394.518C52.3407 448.088 100.729 482.211 167.217 494.181C210.323 501.94 289.95 501.94 333.057 494.181C422.996 477.989 478.843 421.672 494.782 331.089C502.113 289.433 501.643 205.124 493.853 164.981C482.649 107.233 456.824 65.3257 415.513 37.8561C380.334 14.4638 342.912 4.10034 283.135 1.19492C249.813 -0.425221 248.917 -0.423529 212.061 1.35727Z" fill="${color}"/>
               <path fill-rule="evenodd" clip-rule="evenodd" d="M237.051 79.021V94.0428L229.486 94.5813C217.01 95.4687 207.773 99.4642 200.084 107.297C189.363 118.219 185.271 135.276 190.053 149.108C190.844 151.396 191.32 153.439 191.11 153.649C190.653 154.108 137.985 133.598 135.843 132.126C135.019 131.56 125.757 119.409 115.261 105.124C104.764 90.8386 95.7221 79.1898 95.1653 79.2374C94.6094 79.2842 89.7949 82.5368 84.4675 86.4648L74.7807 93.6073L78.005 98.0972C79.7782 100.567 89.7284 114.12 100.118 128.214L119.007 153.842L150.444 166.137L181.881 178.432L185.506 174.244C187.499 171.941 190.732 168.329 192.69 166.219L196.25 162.381L201.327 166.722C207.035 171.602 211.062 174.082 215.853 175.668L219.118 176.748L212.114 183.809C207.899 188.058 205.109 191.58 205.109 192.652C205.109 195.863 211.023 216.157 214.221 223.925C223.555 246.59 237.691 261.394 250 261.394C262.309 261.394 276.445 246.59 285.779 223.925C288.977 216.157 294.891 195.863 294.891 192.652C294.891 191.58 292.101 188.058 287.886 183.809L280.882 176.748L284.147 175.668C288.938 174.082 292.965 171.602 298.673 166.722L303.75 162.381L307.31 166.219C309.268 168.329 312.5 171.94 314.492 174.242L318.115 178.428L349.561 166.147L381.007 153.866L399.89 128.226C410.274 114.123 420.222 100.565 421.995 98.0963L425.219 93.6073L415.532 86.4648C410.205 82.5368 405.391 79.2842 404.835 79.2374C404.278 79.1898 395.236 90.8386 384.739 105.124C374.243 119.409 364.981 131.56 364.157 132.126C362.015 133.598 309.347 154.108 308.89 153.649C308.68 153.439 309.156 151.396 309.947 149.108C314.729 135.276 310.637 118.219 299.916 107.297C292.227 99.4642 282.99 95.4687 270.514 94.5813L262.949 94.0428V79.021V64H250H237.051V79.021ZM29 183.475V196.462L48.208 196.478L67.416 196.494L84.5332 212.495L101.65 228.495H126.055H150.46L151.949 225.183C152.769 223.362 155.915 217.615 158.943 212.413L164.446 202.955L138.087 202.725L111.727 202.497L94.7518 186.528L77.7754 170.559L53.3877 170.523L29 170.489V183.475ZM405.248 186.528L388.273 202.497L361.913 202.725L335.554 202.955L341.057 212.413C344.085 217.615 347.231 223.362 348.051 225.183L349.54 228.495H373.945H398.35L415.467 212.495L432.584 196.494L451.792 196.478L471 196.462V183.475V170.489L446.612 170.523L422.225 170.559L405.248 186.528ZM180.245 227.413C159.252 264.781 145.887 307.089 143.866 342.575C141.842 378.115 151.068 400.147 166.972 397.755C186.298 394.848 210.659 371.942 231.699 336.891L237.051 327.977V306.88V285.783L229.929 282.306C212.227 273.663 196.902 253.574 187.391 226.547C186.092 222.857 184.911 219.837 184.765 219.837C184.619 219.837 182.586 223.246 180.245 227.413ZM312.609 226.547C303.098 253.574 287.773 273.663 270.071 282.306L262.949 285.783V306.88V327.977L268.301 336.891C289.341 371.942 313.702 394.848 333.028 397.755C348.932 400.147 358.158 378.115 356.134 342.575C354.113 307.089 340.748 264.781 319.755 227.413C317.414 223.246 315.381 219.837 315.235 219.837C315.089 219.837 313.908 222.857 312.609 226.547ZM105.494 270.93C89.4029 277.533 75.947 283.251 75.5913 283.636C75.2365 284.021 73.4849 295.245 71.6996 308.578C69.9144 321.91 68.0989 333.278 67.6646 333.84C67.2304 334.401 59.5187 339.462 50.5276 345.087C41.5357 350.713 34.1797 355.57 34.1797 355.882C34.1797 356.535 45.9885 375.743 47.0357 376.793C47.6391 377.398 87.9008 352.968 91.0293 350.1C91.7718 349.419 93.3965 340.445 95.4839 325.489C97.2916 312.544 98.9025 301.845 99.0639 301.714C99.2253 301.584 105.384 299.036 112.75 296.052L126.142 290.626L131.396 274.711C134.287 265.958 136.224 258.826 135.702 258.861C135.179 258.897 121.586 264.328 105.494 270.93ZM368.604 274.711L373.858 290.626L387.25 296.052C394.616 299.036 400.775 301.584 400.936 301.714C401.098 301.845 402.708 312.544 404.516 325.489C406.604 340.445 408.228 349.419 408.971 350.1C412.099 352.968 452.361 377.398 452.964 376.793C454.011 375.743 465.82 356.535 465.82 355.882C465.82 355.57 458.464 350.713 449.472 345.087C440.481 339.462 432.77 334.401 432.335 333.84C431.901 333.278 430.086 321.91 428.3 308.578C426.515 295.245 424.764 284.022 424.41 283.638C423.745 282.916 365.052 258.796 363.961 258.796C363.624 258.796 365.713 265.958 368.604 274.711ZM245.305 363.798C237.486 375.26 229.799 384.672 220.435 394.245C215.332 399.462 211.448 403.992 211.802 404.312C212.968 405.363 223.862 409.413 229.242 410.796C240.683 413.735 259.317 413.735 270.758 410.796C276.138 409.413 287.032 405.363 288.198 404.312C288.552 403.992 284.668 399.462 279.565 394.245C270.201 384.672 262.514 375.26 254.695 363.798C252.35 360.361 250.237 357.549 250 357.549C249.763 357.549 247.65 360.361 245.305 363.798Z" fill="white"/>`,
        "CI": `<path fill-rule="evenodd" clip-rule="evenodd" d="M212.061 1.35727C158.04 3.96674 118.809 15.2147 84.7607 37.8561C51.7586 59.8007 27.6425 92.6533 14.0994 134.119C2.71405 168.974 -2.3441 227.028 1.03023 284.119C4.08811 335.825 10.0973 362.503 25.9011 394.518C52.3407 448.088 100.729 482.211 167.217 494.181C210.323 501.94 289.95 501.94 333.057 494.181C422.996 477.989 478.843 421.672 494.782 331.089C502.113 289.433 501.643 205.124 493.853 164.981C482.649 107.233 456.824 65.3257 415.513 37.8561C380.334 14.4638 342.912 4.10034 283.135 1.19492C249.813 -0.425221 248.917 -0.423529 212.061 1.35727Z" fill="${color}"/>
               <path fill-rule="evenodd" clip-rule="evenodd" d="M176.559 42.4572L165.615 48.2363L181.481 78.4303C190.207 95.0372 197.526 109.093 197.747 109.665C198.06 110.482 193.492 110.706 176.583 110.706H155.018L125.009 140.689L95 170.67L103.959 179.619L112.918 188.567L139.397 162.13L165.876 135.692H187.175H208.473L209.595 138.815C213.839 150.64 225.677 161.338 238.77 165.179C244.651 166.903 256.349 166.903 262.23 165.179C275.323 161.338 287.161 150.64 291.405 138.815L292.527 135.692H313.825H335.124L361.603 162.13L388.082 188.567L397.041 179.619L406 170.67L375.991 140.689L345.982 110.706H324.417C307.508 110.706 302.94 110.482 303.253 109.665C303.474 109.093 310.793 95.0389 319.517 78.4353L335.38 48.2455L325.251 42.8903C319.679 39.9445 314.659 37.4143 314.093 37.2669C313.479 37.1078 307.136 48.2738 298.403 64.8857C290.34 80.2234 283.595 92.9185 283.417 93.0975C283.238 93.2758 281.403 91.9374 279.34 90.1234C262.843 75.6194 238.157 75.6194 221.66 90.1234C219.597 91.9374 217.762 93.2758 217.583 93.0975C217.404 92.9185 210.712 80.3 202.712 65.0565C194.712 49.8129 188.016 37.1919 187.834 37.0096C187.652 36.8272 182.578 39.2791 176.559 42.4572ZM188.378 162.006C182.951 174.253 177.066 194.885 174.61 210.281L173.538 216.995L142.603 235.61C125.588 245.848 111.539 254.324 111.382 254.445C110.994 254.744 122.989 274.719 123.893 275.277C124.29 275.521 134.875 269.512 147.417 261.924C159.959 254.335 170.407 248.126 170.637 248.126C170.868 248.126 171.119 253.842 171.198 260.827C171.276 267.812 171.672 276.713 172.078 280.607C172.504 284.708 172.504 288.008 172.078 288.451C171.671 288.87 160.353 295.853 146.923 303.966L122.507 318.717L122.294 390.858L122.081 463H134.588H147.095L147.309 397.881L147.522 332.763L161.697 324.205C169.493 319.498 176.269 315.633 176.754 315.616C177.239 315.6 178.329 318.303 179.176 321.624C188.357 357.606 207.219 386.296 228.887 397.235C242.1 403.907 258.9 403.907 272.113 397.235C293.781 386.296 312.643 357.606 321.824 321.624C322.671 318.303 323.761 315.6 324.246 315.616C324.731 315.633 331.507 319.498 339.303 324.205L353.478 332.763L353.691 397.881L353.905 463H366.412H378.919L378.706 390.858L378.493 318.717L354.077 303.966C340.647 295.853 329.329 288.87 328.922 288.451C328.496 288.008 328.496 284.708 328.922 280.607C329.328 276.713 329.724 267.812 329.802 260.827C329.881 253.842 330.132 248.126 330.363 248.126C330.593 248.126 341.041 254.335 353.583 261.924C366.125 269.512 376.71 275.521 377.107 275.277C378.011 274.719 390.006 254.744 389.618 254.445C389.461 254.324 375.418 245.851 358.41 235.617L327.487 217.01L326.458 210.706C323.784 194.321 318.059 174.131 312.578 161.75L310.486 157.026L307.68 161.187C300.673 171.579 291.07 179.794 279.61 185.201C269.392 190.022 264.167 191.076 250.5 191.076C236.833 191.076 231.608 190.022 221.39 185.201C209.943 179.801 200.326 171.578 193.341 161.218L190.557 157.089L188.378 162.006Z" fill="white"/>`,
        "RO": `<path fill-rule="evenodd" clip-rule="evenodd" d="M212.061 1.35727C158.04 3.96674 118.809 15.2147 84.7607 37.8561C51.7586 59.8007 27.6425 92.6533 14.0994 134.119C2.71405 168.974 -2.3441 227.028 1.03023 284.119C4.08811 335.825 10.0973 362.503 25.9011 394.518C52.3407 448.088 100.729 482.211 167.217 494.181C210.323 501.94 289.95 501.94 333.057 494.181C422.996 477.989 478.843 421.672 494.782 331.089C502.113 289.433 501.643 205.124 493.853 164.981C482.649 107.233 456.824 65.3257 415.513 37.8561C380.334 14.4638 342.912 4.10034 283.135 1.19492C249.813 -0.425221 248.917 -0.423529 212.061 1.35727Z" fill="${color}"/>
               <path fill-rule="evenodd" clip-rule="evenodd" d="M142 90.618C113.693 95.862 92.315 106.701 72.593 125.808C35.328 161.912 25.402 220.132 48.642 266.283C54.842 278.594 61.868 288.079 73.06 299.25L83.831 310H77.126C59.663 310 45.946 318.253 39.189 332.825C37.011 337.523 36.553 339.963 36.529 347C36.472 363.869 44.652 376.378 59.822 382.617L65.5 384.953L158.282 384.976C257.66 385.002 254.948 384.868 259.5 389.962C261.089 391.74 261.603 394.08 262 401.35L262.5 410.5H275H287.5L287.366 400.5C287.158 384.916 281.82 373.943 271.102 367.066C260.203 360.072 267.628 360.556 162.854 360.001C70.012 359.51 68.167 359.462 66.002 357.502C60.7 352.703 59.806 346.278 63.628 340.444C67.287 334.861 64.948 335 155.111 335H238.286L237.59 324.896C236.507 309.17 232.02 299.787 222.198 292.708C212.208 285.509 212.435 285.543 172.75 285.197L137 284.885V272.442V260H146.032C161.889 260 173.674 254.213 181.047 242.806C185.728 235.564 187.383 228.871 186.788 219.591C185.924 206.136 178.031 194.594 165.487 188.444C160.161 185.832 158.259 185.468 148.25 185.146L137 184.784V172.392V160H147.79C167.357 160 180.448 165.26 193.594 178.406C207.251 192.064 212.627 205.998 211.763 225.5C211.238 237.344 208.787 245.489 202.883 255L200.09 259.5L208.119 260.748C217.55 262.213 227.414 265.915 234.751 270.742C246.215 278.283 256.866 293.273 260.515 307C261.379 310.254 261.981 317.095 261.988 323.75L262 335H363H464L463.983 315.25C463.962 292 462.81 285.061 457.05 273.5C454.858 269.1 448.972 260.325 443.971 254C435.251 242.973 414.524 219.749 406.158 211.63L402.17 207.76L405.509 201.63C410.864 191.801 412.429 185.081 412.411 172C412.398 162.118 412.015 159.405 409.695 152.722C402.592 132.26 386.154 116.934 365.5 111.517C357.649 109.458 342.866 109.466 334.82 111.533C323.336 114.485 313.487 120.31 304.887 129.238L300.274 134.027L286.387 127.407C258.709 114.214 231.621 104.372 199.5 95.84L180.5 90.793L162.5 90.474C152.6 90.298 143.375 90.363 142 90.618ZM388 247.5V260H375.5H363V247.5V235H375.5H388V247.5Z" fill="white"/>`,

        "4": `<path fill-rule="evenodd" clip-rule="evenodd" d="M212.061 1.35727C158.04 3.96674 118.809 15.2147 84.7607 37.8561C51.7586 59.8007 27.6425 92.6533 14.0994 134.119C2.71405 168.974 -2.3441 227.028 1.03023 284.119C4.08811 335.825 10.0973 362.503 25.9011 394.518C52.3407 448.088 100.729 482.211 167.217 494.181C210.323 501.94 289.95 501.94 333.057 494.181C422.996 477.989 478.843 421.672 494.782 331.089C502.113 289.433 501.643 205.124 493.853 164.981C482.649 107.233 456.824 65.3257 415.513 37.8561C380.334 14.4638 342.912 4.10034 283.135 1.19492C249.813 -0.425221 248.917 -0.423529 212.061 1.35727Z" fill="${color}"/>
               <path fill-rule="evenodd" clip-rule="evenodd" d="M237.051 79.021V94.0428L229.486 94.5813C217.01 95.4687 207.773 99.4642 200.084 107.297C189.363 118.219 185.271 135.276 190.053 149.108C190.844 151.396 191.32 153.439 191.11 153.649C190.653 154.108 137.985 133.598 135.843 132.126C135.019 131.56 125.757 119.409 115.261 105.124C104.764 90.8386 95.7221 79.1898 95.1653 79.2374C94.6094 79.2842 89.7949 82.5368 84.4675 86.4648L74.7807 93.6073L78.005 98.0972C79.7782 100.567 89.7284 114.12 100.118 128.214L119.007 153.842L150.444 166.137L181.881 178.432L185.506 174.244C187.499 171.941 190.732 168.329 192.69 166.219L196.25 162.381L201.327 166.722C207.035 171.602 211.062 174.082 215.853 175.668L219.118 176.748L212.114 183.809C207.899 188.058 205.109 191.58 205.109 192.652C205.109 195.863 211.023 216.157 214.221 223.925C223.555 246.59 237.691 261.394 250 261.394C262.309 261.394 276.445 246.59 285.779 223.925C288.977 216.157 294.891 195.863 294.891 192.652C294.891 191.58 292.101 188.058 287.886 183.809L280.882 176.748L284.147 175.668C288.938 174.082 292.965 171.602 298.673 166.722L303.75 162.381L307.31 166.219C309.268 168.329 312.5 171.94 314.492 174.242L318.115 178.428L349.561 166.147L381.007 153.866L399.89 128.226C410.274 114.123 420.222 100.565 421.995 98.0963L425.219 93.6073L415.532 86.4648C410.205 82.5368 405.391 79.2842 404.835 79.2374C404.278 79.1898 395.236 90.8386 384.739 105.124C374.243 119.409 364.981 131.56 364.157 132.126C362.015 133.598 309.347 154.108 308.89 153.649C308.68 153.439 309.156 151.396 309.947 149.108C314.729 135.276 310.637 118.219 299.916 107.297C292.227 99.4642 282.99 95.4687 270.514 94.5813L262.949 94.0428V79.021V64H250H237.051V79.021ZM29 183.475V196.462L48.208 196.478L67.416 196.494L84.5332 212.495L101.65 228.495H126.055H150.46L151.949 225.183C152.769 223.362 155.915 217.615 158.943 212.413L164.446 202.955L138.087 202.725L111.727 202.497L94.7518 186.528L77.7754 170.559L53.3877 170.523L29 170.489V183.475ZM405.248 186.528L388.273 202.497L361.913 202.725L335.554 202.955L341.057 212.413C344.085 217.615 347.231 223.362 348.051 225.183L349.54 228.495H373.945H398.35L415.467 212.495L432.584 196.494L451.792 196.478L471 196.462V183.475V170.489L446.612 170.523L422.225 170.559L405.248 186.528ZM180.245 227.413C159.252 264.781 145.887 307.089 143.866 342.575C141.842 378.115 151.068 400.147 166.972 397.755C186.298 394.848 210.659 371.942 231.699 336.891L237.051 327.977V306.88V285.783L229.929 282.306C212.227 273.663 196.902 253.574 187.391 226.547C186.092 222.857 184.911 219.837 184.765 219.837C184.619 219.837 182.586 223.246 180.245 227.413ZM312.609 226.547C303.098 253.574 287.773 273.663 270.071 282.306L262.949 285.783V306.88V327.977L268.301 336.891C289.341 371.942 313.702 394.848 333.028 397.755C348.932 400.147 358.158 378.115 356.134 342.575C354.113 307.089 340.748 264.781 319.755 227.413C317.414 223.246 315.381 219.837 315.235 219.837C315.089 219.837 313.908 222.857 312.609 226.547ZM105.494 270.93C89.4029 277.533 75.947 283.251 75.5913 283.636C75.2365 284.021 73.4849 295.245 71.6996 308.578C69.9144 321.91 68.0989 333.278 67.6646 333.84C67.2304 334.401 59.5187 339.462 50.5276 345.087C41.5357 350.713 34.1797 355.57 34.1797 355.882C34.1797 356.535 45.9885 375.743 47.0357 376.793C47.6391 377.398 87.9008 352.968 91.0293 350.1C91.7718 349.419 93.3965 340.445 95.4839 325.489C97.2916 312.544 98.9025 301.845 99.0639 301.714C99.2253 301.584 105.384 299.036 112.75 296.052L126.142 290.626L131.396 274.711C134.287 265.958 136.224 258.826 135.702 258.861C135.179 258.897 121.586 264.328 105.494 270.93ZM368.604 274.711L373.858 290.626L387.25 296.052C394.616 299.036 400.775 301.584 400.936 301.714C401.098 301.845 402.708 312.544 404.516 325.489C406.604 340.445 408.228 349.419 408.971 350.1C412.099 352.968 452.361 377.398 452.964 376.793C454.011 375.743 465.82 356.535 465.82 355.882C465.82 355.57 458.464 350.713 449.472 345.087C440.481 339.462 432.77 334.401 432.335 333.84C431.901 333.278 430.086 321.91 428.3 308.578C426.515 295.245 424.764 284.022 424.41 283.638C423.745 282.916 365.052 258.796 363.961 258.796C363.624 258.796 365.713 265.958 368.604 274.711ZM245.305 363.798C237.486 375.26 229.799 384.672 220.435 394.245C215.332 399.462 211.448 403.992 211.802 404.312C212.968 405.363 223.862 409.413 229.242 410.796C240.683 413.735 259.317 413.735 270.758 410.796C276.138 409.413 287.032 405.363 288.198 404.312C288.552 403.992 284.668 399.462 279.565 394.245C270.201 384.672 262.514 375.26 254.695 363.798C252.35 360.361 250.237 357.549 250 357.549C249.763 357.549 247.65 360.361 245.305 363.798Z" fill="white"/>`,
        "3": `<path fill-rule="evenodd" clip-rule="evenodd" d="M212.061 1.35727C158.04 3.96674 118.809 15.2147 84.7607 37.8561C51.7586 59.8007 27.6425 92.6533 14.0994 134.119C2.71405 168.974 -2.3441 227.028 1.03023 284.119C4.08811 335.825 10.0973 362.503 25.9011 394.518C52.3407 448.088 100.729 482.211 167.217 494.181C210.323 501.94 289.95 501.94 333.057 494.181C422.996 477.989 478.843 421.672 494.782 331.089C502.113 289.433 501.643 205.124 493.853 164.981C482.649 107.233 456.824 65.3257 415.513 37.8561C380.334 14.4638 342.912 4.10034 283.135 1.19492C249.813 -0.425221 248.917 -0.423529 212.061 1.35727Z" fill="${color}"/>
               <path fill-rule="evenodd" clip-rule="evenodd" d="M176.559 42.4572L165.615 48.2363L181.481 78.4303C190.207 95.0372 197.526 109.093 197.747 109.665C198.06 110.482 193.492 110.706 176.583 110.706H155.018L125.009 140.689L95 170.67L103.959 179.619L112.918 188.567L139.397 162.13L165.876 135.692H187.175H208.473L209.595 138.815C213.839 150.64 225.677 161.338 238.77 165.179C244.651 166.903 256.349 166.903 262.23 165.179C275.323 161.338 287.161 150.64 291.405 138.815L292.527 135.692H313.825H335.124L361.603 162.13L388.082 188.567L397.041 179.619L406 170.67L375.991 140.689L345.982 110.706H324.417C307.508 110.706 302.94 110.482 303.253 109.665C303.474 109.093 310.793 95.0389 319.517 78.4353L335.38 48.2455L325.251 42.8903C319.679 39.9445 314.659 37.4143 314.093 37.2669C313.479 37.1078 307.136 48.2738 298.403 64.8857C290.34 80.2234 283.595 92.9185 283.417 93.0975C283.238 93.2758 281.403 91.9374 279.34 90.1234C262.843 75.6194 238.157 75.6194 221.66 90.1234C219.597 91.9374 217.762 93.2758 217.583 93.0975C217.404 92.9185 210.712 80.3 202.712 65.0565C194.712 49.8129 188.016 37.1919 187.834 37.0096C187.652 36.8272 182.578 39.2791 176.559 42.4572ZM188.378 162.006C182.951 174.253 177.066 194.885 174.61 210.281L173.538 216.995L142.603 235.61C125.588 245.848 111.539 254.324 111.382 254.445C110.994 254.744 122.989 274.719 123.893 275.277C124.29 275.521 134.875 269.512 147.417 261.924C159.959 254.335 170.407 248.126 170.637 248.126C170.868 248.126 171.119 253.842 171.198 260.827C171.276 267.812 171.672 276.713 172.078 280.607C172.504 284.708 172.504 288.008 172.078 288.451C171.671 288.87 160.353 295.853 146.923 303.966L122.507 318.717L122.294 390.858L122.081 463H134.588H147.095L147.309 397.881L147.522 332.763L161.697 324.205C169.493 319.498 176.269 315.633 176.754 315.616C177.239 315.6 178.329 318.303 179.176 321.624C188.357 357.606 207.219 386.296 228.887 397.235C242.1 403.907 258.9 403.907 272.113 397.235C293.781 386.296 312.643 357.606 321.824 321.624C322.671 318.303 323.761 315.6 324.246 315.616C324.731 315.633 331.507 319.498 339.303 324.205L353.478 332.763L353.691 397.881L353.905 463H366.412H378.919L378.706 390.858L378.493 318.717L354.077 303.966C340.647 295.853 329.329 288.87 328.922 288.451C328.496 288.008 328.496 284.708 328.922 280.607C329.328 276.713 329.724 267.812 329.802 260.827C329.881 253.842 330.132 248.126 330.363 248.126C330.593 248.126 341.041 254.335 353.583 261.924C366.125 269.512 376.71 275.521 377.107 275.277C378.011 274.719 390.006 254.744 389.618 254.445C389.461 254.324 375.418 245.851 358.41 235.617L327.487 217.01L326.458 210.706C323.784 194.321 318.059 174.131 312.578 161.75L310.486 157.026L307.68 161.187C300.673 171.579 291.07 179.794 279.61 185.201C269.392 190.022 264.167 191.076 250.5 191.076C236.833 191.076 231.608 190.022 221.39 185.201C209.943 179.801 200.326 171.578 193.341 161.218L190.557 157.089L188.378 162.006Z" fill="white"/>`,
        "2": `<path fill-rule="evenodd" clip-rule="evenodd" d="M212.061 1.35727C158.04 3.96674 118.809 15.2147 84.7607 37.8561C51.7586 59.8007 27.6425 92.6533 14.0994 134.119C2.71405 168.974 -2.3441 227.028 1.03023 284.119C4.08811 335.825 10.0973 362.503 25.9011 394.518C52.3407 448.088 100.729 482.211 167.217 494.181C210.323 501.94 289.95 501.94 333.057 494.181C422.996 477.989 478.843 421.672 494.782 331.089C502.113 289.433 501.643 205.124 493.853 164.981C482.649 107.233 456.824 65.3257 415.513 37.8561C380.334 14.4638 342.912 4.10034 283.135 1.19492C249.813 -0.425221 248.917 -0.423529 212.061 1.35727Z" fill="${color}"/>
               <path fill-rule="evenodd" clip-rule="evenodd" d="M142 90.618C113.693 95.862 92.315 106.701 72.593 125.808C35.328 161.912 25.402 220.132 48.642 266.283C54.842 278.594 61.868 288.079 73.06 299.25L83.831 310H77.126C59.663 310 45.946 318.253 39.189 332.825C37.011 337.523 36.553 339.963 36.529 347C36.472 363.869 44.652 376.378 59.822 382.617L65.5 384.953L158.282 384.976C257.66 385.002 254.948 384.868 259.5 389.962C261.089 391.74 261.603 394.08 262 401.35L262.5 410.5H275H287.5L287.366 400.5C287.158 384.916 281.82 373.943 271.102 367.066C260.203 360.072 267.628 360.556 162.854 360.001C70.012 359.51 68.167 359.462 66.002 357.502C60.7 352.703 59.806 346.278 63.628 340.444C67.287 334.861 64.948 335 155.111 335H238.286L237.59 324.896C236.507 309.17 232.02 299.787 222.198 292.708C212.208 285.509 212.435 285.543 172.75 285.197L137 284.885V272.442V260H146.032C161.889 260 173.674 254.213 181.047 242.806C185.728 235.564 187.383 228.871 186.788 219.591C185.924 206.136 178.031 194.594 165.487 188.444C160.161 185.832 158.259 185.468 148.25 185.146L137 184.784V172.392V160H147.79C167.357 160 180.448 165.26 193.594 178.406C207.251 192.064 212.627 205.998 211.763 225.5C211.238 237.344 208.787 245.489 202.883 255L200.09 259.5L208.119 260.748C217.55 262.213 227.414 265.915 234.751 270.742C246.215 278.283 256.866 293.273 260.515 307C261.379 310.254 261.981 317.095 261.988 323.75L262 335H363H464L463.983 315.25C463.962 292 462.81 285.061 457.05 273.5C454.858 269.1 448.972 260.325 443.971 254C435.251 242.973 414.524 219.749 406.158 211.63L402.17 207.76L405.509 201.63C410.864 191.801 412.429 185.081 412.411 172C412.398 162.118 412.015 159.405 409.695 152.722C402.592 132.26 386.154 116.934 365.5 111.517C357.649 109.458 342.866 109.466 334.82 111.533C323.336 114.485 313.487 120.31 304.887 129.238L300.274 134.027L286.387 127.407C258.709 114.214 231.621 104.372 199.5 95.84L180.5 90.793L162.5 90.474C152.6 90.298 143.375 90.363 142 90.618ZM388 247.5V260H375.5H363V247.5V235H375.5H388V247.5Z" fill="white"/>`,

    };
    return encounter_icon[type];
}


const trap_statuses = {
    // dark: "#878686", success: "#68ff00", warning: "#FF8B00", danger: "#FF0000",
    dark: "#878A99", success: "#0AB39C", warning: "#F7B84B", danger: "#F06548",
};

const vulnarability_statuses = {
    low: "#333333", avarage: "#FFFB00", high: "#FF8B00", critical: "#FF0000",
};

const pest_types = {
    "FI": "ri-mouse-fill",
    "CI": "ri-rat-fill",
    "RO": rat_svg,
    "BI": "ri-fly-fill",
    "WA": "ri-mosquito-fill",
};

function activate_continue_btn(serial_number) {
    let del_from_plan = $(`#del_from_plan_${serial_number}`);
    if (del_from_plan.is(":checked")) {
        $(`#continue_btn`).prop("disabled", false);
    } else {
        $(`#continue_btn`).prop("disabled", true);
    }
}

function deactivate_floor_chackbox(serial_number) {
    let del_checkbox = $(`#del_from_object_${serial_number}`);
    if (del_checkbox.is(":checked")) {
        $(`#del_from_plan_${serial_number}`).prop("checked", true).prop("disabled", true);
        $(`#continue_btn`).prop("disabled", false);
    } else {
        $(`#del_from_plan_${serial_number}`).prop("checked", false).prop("disabled", false);
        $(`#continue_btn`).prop("disabled", true);
    }
}

function deactivate_floor_object_chackbox(serial_number) {
    let del_checkbox = $(`#del_${serial_number}`);
    if (del_checkbox.is(":checked")) {
        $(`#del_from_plan_${serial_number}`).prop("checked", true).prop("disabled", true);
        $(`#del_from_object_${serial_number}`).prop("checked", true).prop("disabled", true);
        $(`#continue_btn`).prop("disabled", false);

    } else {
        $(`#del_from_plan_${serial_number}`).prop("checked", false).prop("disabled", false);
        $(`#del_from_object_${serial_number}`).prop("checked", false).prop("disabled", false);
        $(`#continue_btn`).prop("disabled", true);

    }
}

function make_del_trap_modal(trap) {
    let del_trap_modal = `<div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content">
                                        <div class="modal-body text-center p-5">
                                            <lord-icon
                                                src="https://cdn.lordicon.com/tdrtiskw.json"
                                                trigger="loop"
                                                colors="primary:#f7b84b,secondary:#405189"
                                                style="width:130px;height:130px">
                                            </lord-icon>
                                            <div class="mt-4 pt-4">
                                                <h4>${gettext("Removing the trap")}</h4>
                                                <p class="text-muted">${gettext("You have several options for removing the trap")}:</p>
                                                <div class="form-check form-check-outline form-check-danger mb-3">
                                                    <input class="form-check-input" type="checkbox" id="del_from_plan_${trap.serial_number}">
                                                    <label class="form-check-label" for="del_from_plan_${trap.serial_number}">
                                                        ${gettext("Remove the trap from the plan (the trap will remain on the object)")}
                                                    </label>
                                                </div>
                                                <div class="form-check form-check-outline form-check-danger mb-3">
                                                    <input class="form-check-input" type="checkbox" id="del_from_object_${trap.serial_number}">
                                                    <label class="form-check-label" for="del_from_object_${trap.serial_number}">
                                                        ${gettext("Remove the trap from the object (it will be removed from the master and the object)")}
                                                    </label>
                                                </div>
                                                <div class="form-check form-check-outline form-check-danger mb-3">
                                                    <input class="form-check-input" type="checkbox" id="del_${trap.serial_number}">
                                                    <label class="form-check-label" for="del_${trap.serial_number}">
                                                        ${gettext("Remove the trap (it will be completely removed from the system)")}
                                                    </label>
                                                </div>
                                                <!-- Toogle to second dialog -->
                                                <button id="continue_btn" disabled class="btn btn-warning" data-bs-toggle="button" onclick="floor_init.show_trap_del_modal(${trap.number})">
                                                    ${gettext("Continue")}
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                `;
    return del_trap_modal;
}

function make_del_trap_success_modal(trap, msg) {
    let del_trap_success_modal = `<div class="modal-dialog modal-dialog-centered">
                                            <div class="modal-content">
                                                <div class="modal-body text-center p-5">
                                                    <lord-icon src="https://cdn.lordicon.com/gsqxdxog.json" trigger="loop" colors="primary:#f7b84b,secondary:#f06548" style="width:100px;height:100px"></lord-icon>
                                                    <div class="mt-4 pt-3">
                                                        <h4 class="mb-3">${msg}</h4>
                                                        <p class="text-muted mb-4"></p>
                                                        <div class="hstack gap-2 justify-content-center">
                                                            <button id="del_trap_btn" type="button" class="btn btn-danger" onclick="floor_init.trap_del(${trap.number})">${gettext("Remove")}</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                       `;
    return del_trap_success_modal;
}

function trap_marker_html(trap, height, width) {
    if (trap.pest_count) {
        let html_marker = `<div class="square-container">
                                  <div class="green-square" style="background-color: ${trap_statuses[trap.status]}">
                                    <span class="number">${trap.pest_count}</span>
                                  </div>
                                  <span class="above-number fw-bolder">${trap.number}</span>
                                </div>`;
        return html_marker;
    } else {
        let html_marker = `<div class="square-container">
                                  <div class="green-square" style="background-color: ${trap_statuses[trap.status]}">
                                    <span class="number">0</span>
                                  </div>
                                  <span class="above-number fw-bolder">${trap.number}</span>
                                </div>`;
        return html_marker;
    }


}

function make_trap_popup(trap) {
    let html_popup = `<b>${gettext("Trap")} №${trap.number}</b>
                                <br>${gettext("Model")}: ${trap.model}
                                <br><div class="row align-content-center text-center">
                                    <div class="col-4 align-items-center text-center">
                                        <a href="/trap/info/${trap.serial_number.toLowerCase()}" class="btn btn-ghost-info custom-toggle">
                                            <span class="icon-on"><i class="ri-eye-fill align-bottom"></i></span> 
                                            <span class="icon-off"><i class="ri-eye-fill align-bottom"></i></span>
                                        </a>
                                    </div>
                                    <div class="col-4 align-items-center">
                                        <button type="button" class="btn btn-ghost-success custom-toggle" data-bs-toggle="button" onclick="floor_init.make_trap_draggable(${trap.number})">
                                            <span class="icon-on"><i class="ri-drag-move-2-fill align-bottom"></i></span> 
                                            <span class="icon-off"><i class="ri-drag-move-2-fill align-bottom"></i></span>
                                        </button>
                                    </div>                               
                                    <div class="col-4 align-items-center text-center">
                                        <button type="button" id="del_trap_btn" class="btn btn-ghost-danger custom-toggle" data-bs-toggle="button" onclick="floor_init.show_trap_prepare_del_modal(${trap.number})">
                                            <span class="icon-on"><i class="ri-delete-bin-fill align-bottom"></i></span> 
                                            <span class="icon-off"><i class="ri-delete-bin-fill align-bottom"></i></span>
                                        </button>
                                    </div>
                                </div>
                                `;
    return html_popup;
}

function make_save_btn_popup(trap) {
    let html_popup = `<b>${gettext("Trap")} №${trap.number}</b>
                                <br>${gettext("Model")}: ${trap.model}
                                <br><div class="row align-content-center text-center">                        
                                    <div class="col-12 align-items-center">
                                        <button type="button" class="btn btn-ghost-success custom-toggle" data-bs-toggle="button" onclick="floor_init.make_undraggable(${trap.number}, 'new_location')">
                                            ${gettext("save")}
                                        </button>
                                    </div>
                                </div>
                                `;
    return html_popup;
}
function make_move_btn_popup(trap) {
    let html_popup = `<b>${gettext("Trap")} №${trap.number}</b>
                                <br>${gettext("Model")}: ${trap.model}
                                <br><span class="fw-bold">${gettext("adjustment")}</span> - <span class="">${gettext("just move trap")}</span>
                                <br><span class="fw-bold">${gettext("new place")}</span> - <span class="">${gettext("create new place")}</span>
                                <br><div class="row align-content-center text-center">                        
                                    <div class="col-12 align-items-center">
                                        <button type="button" class="btn btn-ghost-success custom-toggle" data-bs-toggle="button" onclick="floor_init.make_undraggable(${trap.number}, 'adjustment')">
                                            ${gettext("adjustment")}
                                        </button>
                                        <button type="button" class="btn btn-ghost-success custom-toggle" data-bs-toggle="button" onclick="floor_init.make_undraggable(${trap.number}, 'new_location')">
                                            ${gettext("new place")}
                                        </button>
                                    </div>
                                </div>
                                `;
    return html_popup;
}
function make_del_hub_modal(hub) {
    let del_hub_modal = `<div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content">
                                        <div class="modal-body text-center p-5">
                                            <lord-icon
                                                src="https://cdn.lordicon.com/tdrtiskw.json"
                                                trigger="loop"
                                                colors="primary:#f7b84b,secondary:#5426b2"
                                                style="width:130px;height:130px">
                                            </lord-icon>
                                            <div class="mt-4 pt-4">
                                                <h4>${gettext("Removing the hub")}</h4>
                                                <p class="text-muted">${gettext("You have several options for removing the hub")}:</p>
                                                <div class="form-check form-check-outline form-check-danger mb-3">
                                                    <input class="form-check-input" type="checkbox" id="del_from_plan_${hub.serial_number}">
                                                    <label class="form-check-label" for="del_from_plan_${hub.serial_number}">
                                                        ${gettext("Remove the hub from the plan (the hub will remain on the object)")}
                                                    </label>
                                                </div>
                                                <div class="form-check form-check-outline form-check-danger mb-3">
                                                    <input class="form-check-input" type="checkbox" id="del_from_object_${hub.serial_number}">
                                                    <label class="form-check-label" for="del_from_object_${hub.serial_number}">
                                                        ${gettext("Remove the hub from the object (it will be deleted from the master and the object)")}
                                                    </label>
                                                </div>
                                                <div class="form-check form-check-outline form-check-danger mb-3">
                                                    <input class="form-check-input" type="checkbox" id="del_${hub.serial_number}">
                                                    <label class="form-check-label" for="del_${hub.serial_number}">
                                                        ${gettext("Remove the hub (it will be completely removed from the system)")}
                                                    </label>
                                                </div>
                                                <!-- Toogle to second dialog -->
                                                <button id="continue_btn" disabled class="btn btn-warning" data-bs-toggle="button" onclick="floor_init.show_hub_del_modal(${hub.number})">
                                                    ${gettext("Continue")}
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                `;
    return del_hub_modal;
}

function make_del_hub_success_modal(hub, msg) {
    let del_trap_success_modal = `<div class="modal-dialog modal-dialog-centered">
                                            <div class="modal-content">
                                                <div class="modal-body text-center p-5">
                                                    <lord-icon src="https://cdn.lordicon.com/gsqxdxog.json" trigger="loop" colors="primary:#f7b84b,secondary:#f06548" style="width:100px;height:100px"></lord-icon>
                                                    <div class="mt-4 pt-3">
                                                        <h4 class="mb-3">${msg}</h4>
                                                        <p class="text-muted mb-4"></p>
                                                        <div class="hstack gap-2 justify-content-center">
                                                            <button id="del_trap_btn" type="button" class="btn btn-danger" onclick="floor_init.hub_del(${hub.number})">${gettext("Remove")}</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                       `;
    return del_trap_success_modal;
}

function hub_marker_html(hub, height, width) {
    let html_marker = `<div class="square-container">
                                  <div style="background-color: ${trap_statuses[hub.status]}">
                                    <span class=""><i class="ri-router-fill" style="font-size: 30px; color: ${trap_statuses.success}"></i></span>
                                  </div>
<!--                                  <span class="above-number fw-bolder">${hub.number}</span>-->
                                </div>`;
    return html_marker;
}

function make_hub_popup(hub) {
    let html_popup = `<b>${gettext("Hub")} №${hub.number}</b>
                                <br>${gettext("Model")}: ${hub.model}
                                <br><div class="row align-content-center text-center">
                                    <div class="col-4 align-items-center text-center">
                                        <a href="/hub/info/${hub.serial_number.toLowerCase()}" class="btn btn-ghost-info custom-toggle">
                                            <span class="icon-on"><i class="ri-eye-fill align-bottom"></i></span> 
                                            <span class="icon-off"><i class="ri-eye-fill align-bottom"></i></span>
                                        </a>
                                    </div>
                                    <div class="col-4 align-items-center">
                                        <button type="button" class="btn btn-ghost-success custom-toggle" data-bs-toggle="button" onclick="floor_init.make_hub_draggable(${hub.number})">
                                            <span class="icon-on"><i class="ri-drag-move-2-fill align-bottom"></i></span> 
                                            <span class="icon-off"><i class="ri-drag-move-2-fill align-bottom"></i></span>
                                        </button>
                                    </div>                               
                                    <div class="col-4 align-items-center text-center">
                                        <button type="button" id="del_trap_btn" class="btn btn-ghost-danger custom-toggle" data-bs-toggle="button" onclick="floor_init.show_hub_prepare_del_modal(${hub.number})">
                                            <span class="icon-on"><i class="ri-delete-bin-fill align-bottom"></i></span> 
                                            <span class="icon-off"><i class="ri-delete-bin-fill align-bottom"></i></span>
                                        </button>
                                    </div>
                                </div>
                                `;
    return html_popup;
}

function make_hub_save_btn_popup(hub) {
    let html_popup = `<b>${gettext("Hub")} №${hub.number}</b>
                                <br>${gettext("Model")}: ${hub.model}
                                <br><div class="row align-content-center text-center">                        
                                    <div class="col-12 align-items-center">
                                        <button type="button" class="btn btn-ghost-success custom-toggle" data-bs-toggle="button" onclick="floor_init.make_hub_undraggable(${hub.number})">
                                            ${gettext("Save")}
                                        </button>
                                    </div>
                                </div>
                                `;
    return html_popup;
}

function vulnerability_marker_html_res(vulnerability, height, width) {

    if (vulnerability.category === 'The presence of pests') {
        return `<div class="avatar-xxs bg-danger-subtle flex-shrink-0">
                                        <span class="avatar-title bg-danger-subtle rounded-circle fs-2" style="background-color: #f6b006">
                                            <i class="align-self-center vulnerability-icon ri-mouse-fill"></i>
                                        </span>
                                    </div>`;
    } else if (vulnerability.category === 'Staff practice') {
        return `<div class="flex-shrink-0">
                                        <span class="avatar-title bg-danger-subtle rounded-circle fs-2" style="background-color: #f6b006">
                                            <i class="align-self-center vulnerability-icon ri-knife-blood-fill"></i>
                                        </span>
                                    </div>`;
    } else if (vulnerability.category === 'Sanitary condition') {
        return `<div class="avatar-xxs bg-danger-subtle flex-shrink-0">
                                        <span class="avatar-title bg-danger-subtle rounded-circle fs-2" style="background-color: #f6b006">
                                            <i class="align-self-center vulnerability-icon ri-blur-off-fill"></i>
                                        </span>
                                    </div>`;
    } else if (vulnerability.category === 'Technical condition') {
        return `<div class="avatar-xxs bg-danger-subtle flex-shrink-0">
                                        <span class="avatar-title bg-danger-subtle rounded-circle fs-2" style="background-color: #f6b006">
                                            <i class="align-self-center vulnerability-icon ri-tools-fill"></i>
                                        </span>
                                    </div>`;
    }
    return ``;
}

function vulnerability_marker_html(vulnerability, height, width) {
    let color = "";
    if (vulnerability.criticality === 'Low') {
        color = vulnarability_statuses.low;
    } else if (vulnerability.criticality === 'Average') {
        color = vulnarability_statuses.avarage;
    } else if (vulnerability.criticality === 'High') {
        color = vulnarability_statuses.high;
    } else {
        color = vulnarability_statuses.critical;
    }

    if (vulnerability.category === 'The presence of pests') {
        return `<div class="trap-marker">
                    <svg width="45" height="45" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
                        ${get_vulnarability_icon(color, "techical")}
                    </svg>
                </div>`;
    } else if (vulnerability.category === 'Staff practice') {
        return `<div class="trap-marker">
                    <svg width="45" height="45" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
                        ${get_vulnarability_icon(color, "personal")}
                    </svg>
                </div>`;
    } else if (vulnerability.category === 'Sanitary condition') {
        return `<div class="trap-marker">
                    <svg width="45" height="45" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
                        ${get_vulnarability_icon(color, "sanitary")}
                    </svg>
                </div>`;
    } else if (vulnerability.category === 'Technical condition') {
        return `<div class="trap-marker">
                    <svg width="45" height="45" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
                        ${get_vulnarability_icon(color, "techical")}
                    </svg>
                </div>`;
    }
    return ``;
}

function make_vulnerability_popup(vulnerability) {
    let html_popup = `
        <b>${gettext("Criticality")}:</b> ${vulnerability.criticality}
        <br><b>${gettext("Category")}:</b> ${vulnerability.category}
        <br><div class="row align-content-center text-center mt-2">
            <div class="col-6 align-items-center text-center">
                <a href="/vulnerabilities/${vulnerability.id}" class="btn btn-ghost-info custom-toggle">
                    <span class="icon-on"><i class="ri-eye-fill align-bottom"></i></span> 
                    <span class="icon-off"><i class="ri-eye-fill align-bottom"></i></span>
                </a>
            </div>
            <div class="col-6 align-items-center text-center">
                <a href="/vulnerabilities/${vulnerability.id}/update/" class="btn btn-ghost-warning custom-toggle" >
                    <i class="ri-pencil-fill align-bottom text-warning"></i>
                </a>
            </div>
        </div>
    `;
    return html_popup;
}

function make_vulnerability_save_btn_popup(vulnerability) {
    let html_popup = `<b>${gettext("Service")}: ${vulnerability.service}</b>
                                <br>${gettext("Category")}: ${vulnerability.category}
                                <br><div class="row align-content-center text-center">
                                    <div class="col-12 align-items-center">
                                        <button type="button" class="btn btn-ghost-success custom-toggle" data-bs-toggle="button" onclick="floor_init.make_vulnerability_undraggable('${vulnerability.id}')">
                                            ${gettext("Save")}
                                        </button>
                                    </div>
                                </div>
                                `;
    return html_popup;
}

function encounter_marker_html_res(encounter, height, width) {
    if (encounter.inspection_date) {
        return `<div class="avatar-xs bg-danger-subtle flex-shrink-0">
                    <span class="avatar-title bg-danger-subtle rounded-circle fs-2" style="background-color: ${trap_statuses['success']}">
                        <i class="align-self-center vulnerability-icon ">
                            <svg width="34" height="16" viewBox="0 0 456 250" fill="none" xmlns="http://www.w3.org/2000/svg">
                                ${pest_types[encounter.pest__pest_type]}
                            </svg>
                        </i>
                    </span>
                </div>`
    } else {
        return `<div class="avatar-xs bg-danger-subtle flex-shrink-0">
                    <span class="avatar-title bg-danger-subtle rounded-circle fs-2" style="background-color: ${trap_statuses['danger']}">
                        <i class="align-self-center align-content-center vulnerability-icon">
                            <svg width="34" height="16" viewBox="0 0 456 250" fill="none" xmlns="http://www.w3.org/2000/svg">
                                ${pest_types[encounter.pest__pest_type]}
                            </svg>
                        </i>
                    </span>
                </div>`
    }

}

function encounter_marker_html(encounter, height, width) {
    if (encounter.inspection_date) {
        return `<div class="trap-marker">
                    <svg width="25" height="25" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
                        ${get_encounter_icon(trap_statuses.success, encounter.pest__pest_type)}
                    </svg>
                </div>`;
    } else {
        return `<div class="trap-marker">
                    <svg width="25" height="25" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
                        ${get_encounter_icon(trap_statuses.warning, encounter.pest__pest_type)}
                    </svg>                        
                </div>`;
    }
}

function encounter_marker_html_from_modal(encounter, height, width) {
    if (encounter.inspection_date) {
        return `<div class="trap-marker">
                    <svg width="25" height="25" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
                        ${get_encounter_icon(trap_statuses.success, encounter.pest)}
                    </svg>
                </div>`;
    } else {
        return `<div class="trap-marker">
                    <svg width="25" height="25" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
                        ${get_encounter_icon(trap_statuses.warning, encounter.pest)}
                    </svg>                        
                </div>`;
    }
}

function make_encounter_popup(encounter) {
    if (encounter.inspection_date === null) {
        return `
                <b>${gettext("Date of discovery")}:</b> ${encounter.discovery_date}
                <br><b>${gettext("Detection time")}:</b> ${encounter.discovery_time}
                <br><b>${gettext("Pest")}:</b> ${encounter.pest__pest_type}
                <br><b>${gettext("Trace")}:</b> ${encounter.pest_traces}
                <br><b>${gettext("Date of inspection")}:</b> <span class="text-danger">${gettext("NOT INSPECTED")}</span>
                <hr>
                <div class="row">

                    <div class="col-12 text-center">
                        <a title=${gettext("Edit Actions?")} href="/journal_encounters/${encounter.id}/" class="btn btn-ghost-info">
                            <i class="ri-pencil-fill text-warning"></i>
                        </a>  
                    </div>
                </div>                
                `;
    } else {
        return `
                <b>${gettext("Date of discovery")}:</b> ${encounter.discovery_date}
                <br><b>${gettext("Detection time")}:</b> ${encounter.discovery_time}
                <br><b>${gettext("Pest")}:</b> ${encounter.pest__pest_type}
                <br><b>${gettext("Trace")}:</b> ${encounter.pest_traces}
                <br><b>${gettext("Date of inspection")}:</b> ${encounter.inspection_date}
                <br><b>${gettext("Inspection time")}:</b> ${encounter.inspection_time}
                <br><b>${gettext("Inspector")}:</b> ${encounter.inspector__id}
                <br><b>${gettext("Corrective actions")}:</b>  ${encounter.actions_to_correct}     
                <hr>
                <div class="row">
                    <div class="col-12 text-center">
                        <a title="${gettext("View in detail?")}" href="/journal_encounters/${encounter.id}" class="btn btn-ghost-info">
                            <span class="icon-on"><i class="ri-eye-fill text-primary"></i></span> 
                        </a>  
                    </div>
                </div>  

                `;
    }
}

function make_encounter_save_btn_popup(encounter) {

    if (encounter.inspection_date) {
        return `
                <b>${gettext("Date of discovery")}:</b> ${encounter.discovery_date}
                <br><b>${gettext("Detection time")}:</b> ${encounter.discovery_time}
                <br><b>${gettext("Pest")}:</b> ${encounter.pest__pest_type}
                <br><b>${gettext("Trace")}:</b> ${encounter.pest_traces}
                <br><b>${gettext("Date of inspection")}:</b> ${encounter.inspection_date}
                <br><b>${gettext("Inspection time")}:</b> ${encounter.inspection_time}
                <br><b>${gettext("Inspector")}:</b> ${encounter.inspector__id}
                <br><b>${gettext("Corrective actions")}:</b>  ${encounter.actions_to_correct}
                <br><div class="row align-content-center text-center">
                        <div class="col-12 align-items-center">
                            <button type="button" class="btn btn-ghost-success custom-toggle" data-bs-toggle="button" onclick="floor_init.make_encounter_undraggable('${encounter.id}')">
                                ${gettext("Save")}
                            </button>
                        </div>
                    </div>                `

    } else {
        return `
                <b>${gettext("Date of discovery")}:</b> ${encounter.discovery_date}
                <br><b>${gettext("Detection time")}:</b> ${encounter.discovery_time}
                <br><b>${gettext("Pest")}:</b> ${encounter.pest__pest_type}
                <br><b>${gettext("Trace")}:</b> ${encounter.pest_traces}
                <br><b>${gettext("Date of inspection")}:</b> <span class="text-danger">${gettext("NOT INSPECTED")}</span>
                <br><div class="row align-content-center text-center">
                        <div class="col-12 align-items-center">
                            <button type="button" class="btn btn-ghost-success custom-toggle" data-bs-toggle="button" onclick="floor_init.make_encounter_undraggable('${encounter.id}')">
                                ${gettext("Save")}
                            </button>
                        </div>
                    </div>                                             
                `
    }

    let html_popup = `<b>${gettext("Service")}: ${vulnerability.service}</b>
                                <br>${gettext("Category")}: ${vulnerability.category}
                                
                                `
    return html_popup;
}


class FloorPlan {
    constructor(floor_id, floor_plan_url, img_scale, img_width, img_height, traps, hubs, vulnerabilities, encounters) {
        this.floor_id = floor_id;
        this.floor_plan_url = floor_plan_url;
        this.selected_trap = selected_trap;
        this.selected_vulnerability = selected_vulnerability;
        this._img_scale = img_scale;
        this.img_width = img_width;
        this.img_height = img_height;

        this._map = null;
        this.trapsLayer = null;
        this.hubsLayer = null;
        this.vulnerabilitiesLayer = null;
        this.vulnerabilitiesArchiveLayer = null;
        this.encountersLayer = null;

        this.archive_trapsLayer = null;
        this.archive_hubsLayer = null;
        this.archive_vulnerabilitiesLayer = null;
        this.archive_encountersLayer = null;

        this.textLayer = null;
        this.traps = traps;
        this.hubs = hubs;
        this.vulnerabilities = vulnerabilities;
        this.encounters = encounters;
        this.heatmapLayer = null;
        this._scale = null;
    }

    init() {
        this._map = L.map(`container`, {
            crs: L.CRS.Simple,
            attributionControl: true,
            fullscreenControl: true,
            zoomControl: true,
            zoomDelta: 0.1,
            zoomSnap: 0,
            maxZoom: 5,
            minZoom: -5,
            setZoom: -5,
            wheelPxPerZoomLevel: 500,
            zoomAnimation: true,
        });


        var windowWidth = $(`#floor_plan_${this.floor_id}`).width();
        const parrentElement = document.getElementById(`perent_container`);
        const parrentWidth = parrentElement.clientWidth;
        var srcWidth = this.img_width;
        var srcHeight = this.img_height;
        this._scale = Math.ceil(srcWidth / parrentWidth);

        var imageBounds = new L.LatLngBounds([0, 0], [srcHeight, srcWidth]);
        cfg.bound = imageBounds;
        var options = {noWrap: true, maxZoom: 2, minZoom: 0};
        var center = new L.LatLng(srcHeight / this._scale / 2, srcWidth / this._scale / 2);
        this._map.setView(center, -3);
        this.heat_data = {
            max: 50,
            data: place_points_signals,
        };

        this.floor_image = L.imageOverlay(this.floor_plan_url, imageBounds, options).addTo(this._map);
        this.customMarker = L.Marker.extend({
            options: {
                riseOnHover: true,
                draggable: false,
                autoPan: true,
                object_data: null,
                id: null,
                // opacity: 1,
            }
        });

        this.trapsLayer = L.layerGroup().addTo(this._map);
        this.hubsLayer = L.layerGroup().addTo(this._map);
        this.vulnerabilitiesLayer = L.layerGroup().addTo(this._map);
        this.vulnerabilitiesArchiveLayer = L.layerGroup().addTo(this._map);
        this.encountersLayer = L.layerGroup().addTo(this._map);

        this.archive_trapsLayer = L.layerGroup();
        this.archive_hubsLayer = L.layerGroup();
        this.archive_vulnerabilitiesLayer = L.layerGroup();
        this.archive_vulnerabilitiesArchiveLayer = L.layerGroup();
        this.archive_encountersLayer = L.layerGroup();

        this.textLayer = L.layerGroup().addTo(this._map);
        this.legendLayer = L.layerGroup().addTo(this._map);
        // this.heatmapLayer = L.layerGroup();
        this.heatmap = new HeatmapOverlay(cfg, this.floor_image);

        // this.heatmap.addTo(this.heatmapLayer);

        // this.heatmap.addTo(this.heatmapLayer);
        // this.heatmap.remove();
        // this._map.bringToBack();
        // Add the HeatmapOverlay back to the map
        // this.heatmap.addTo(this._map);

        // this.map.on('contextmenu', (e) => {
        //     if (this.mode_status === 'edit') {
        //         this.showContextMenu(e.latlng);
        //     }
        // });

        this._map.on('zoomend', () => {
            // this.reRenderTrap();
            // const markers = this.trapsLayer.getLayers();
            // const newZoom = this._map.getZoom();
            // markers.forEach(marker => {
            //     const currentIconSize = marker.options.icon.options.iconSize;
            //     const newIconSize = [currentIconSize[0] * newZoom, currentIconSize[1] * newZoom];
            //     marker.options.icon.options.iconSize = newIconSize;
            //     marker.update();
            // });
        });
        this._map.on('fullscreenchange', function () {
            if (this._map.isFullscreen()) {
            } else {
            }
        });


        for (let trap of this.traps) {
            this.renderTrap(trap);
        }

        for (let hub of this.hubs) {
            this.renderHub(hub);
        }

        for (let vulnerability of this.vulnerabilities) {
            this.renderVulnerability(vulnerability);
        }

        for (let encounter of this.encounters) {
            this.renderEncounter(encounter);
        }


        this.filterBtn = L.control.custom({
            position: 'topright',
            content:
                `<div class="accordion accordion-flush card card-animate shadow-hover m-1 p-0">
          <div class="card-body p-0">
            <h2 class="accordion-header m-2" id="headingOne_1">
              <button id="btn_accordion_1" class="accordion-button fw-bold collapsed p-0" type="button"
                      data-bs-toggle="collapse" data-bs-target="#collapseOne_1" aria-expanded="false"
                      aria-controls="collapseOne_1">
                ${gettext("Settings")}
              </button>
            </h2>
            <div id="collapseOne_1" class="accordion-collapse collapse" aria-labelledby="headingOne_1"
                 data-bs-parent="#default-accordion-example" style="">
              <div class="accordion-body">
                <div class="row">
                  <div id="section_1" class="col-12">
                    <div class="row justify-content-end form-check form-switch-primary mb-0">
                      <div class="col-4 align-self-end">
                        <input id="hide_traps" class="form-check-input" type="checkbox" role="switch" checked="">
                      </div>
                      <div class="col-12 mx-2 justify-content-end">
                        <p class="align-self-end">${gettext("Пастки")}</p>
                      </div>
                    </div>
                    <div class="row form-check form-switch-primary mb-0">
                      <div class="col-4">
                        <input id="hide_vulnerabilities" class="form-check-input" type="checkbox" role="switch"
                               checked="">
                      </div>
                      <div class="col-12 mx-2">
                        <p>${gettext("Вразливості")}</p>
                      </div>
                    </div>
                    <div class="row form-check  form-switch-primary mb-0">
                      <div class="col-4">
                        <input id="hide_encounters" class="form-check-input" type="checkbox" role="switch" checked="">
                      </div>
                      <div class="col-12 mx-2">
                        <p>${gettext("Зіткнення зі шкідниками")}</p>
                      </div>
                    </div>
                    <div class="row form-check form-switch-primary mb-0">
                      <div class="col-4">
                        <input id="hide_heatmap" class="form-check-input" type="checkbox" role="switch" unchecked="">
                      </div>
                      <div class="col-12 mx-2">
                        <p>Heatmap</p>
                      </div>
                    </div>
                    <div class="row form-check form-switch-primary mb-0">
                      <div class="col-4">
                        <input id="hide_archive" class="form-check-input" type="checkbox" role="switch" unchecked="">
                      </div>
                      <div class="col-12 mx-2">
                        <p>Archive</p>
                      </div>
                    </div>
                    <div class="row justify-content-center mt-3">
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>`


            ,
            classes: 'row justify-content-end mb-0',
            style:
                {
                    margin: '10px',
                    padding: '1px 1 1 1',
                    cursor: 'pointer',
                },
            datas:
                {
                    'foo': 'bar',
                },
            events:
                {
                    click: function (data) {
                    },
                    dblclick: function (data) {
                        console.log('wrapper div element dblclicked');
                        console.log(data);
                    },
                    contextmenu: function (data) {
                        console.log('wrapper div element contextmenu');
                        console.log(data);
                    },
                }
        }).addTo(this._map);
        this.choiceDate = L.control.custom({
            position: 'topright',
            content:
                `<div class="accordion accordion-flush card card-animate shadow-hover m-1 p-0" style="max-width: 150px">
                  <div class="card-body p-0">
                    <h2 class="accordion-header m-2" id="headingTwo_1">
                      <button id="btn_accordion_2" class="accordion-button fw-bold p-0" type="button"
                              data-bs-toggle="collapse" data-bs-target="#collapseTwo_1" aria-expanded="false"
                              aria-controls="collapseTwo_1">
                        ${gettext("Choice date")}
                      </button>
                    </h2>
                    <div id="collapseTwo_1" class="accordion-collapse collapse show" aria-labelledby="headingTwo_1"
                         data-bs-parent="#default-accordion-example" style="">
                      <div class="accordion-body">
                        <div class="row" id="slider_container">
                        <form class="" >
                          <div class="row">
                            <div class="mb-3 px-1 col-md-12">                          
                              <label class="form-label fw-bold mb-0">${gettext("From")}</label>
                              <input type="date" class="form-control" id="heatmap_date_from" name="date_from" required>
                            </div>
                            <div class="mb-3 px-1 col-md-12">
                              <label class="form-label fw-bold mt-1 mb-0">${gettext("To")}</label>
                              <input type="date" class="form-control" id="heatmap_date_to" name="date_to" required>
                            </div>
                          </div>
                        </form>
                        <div id="soft" class="mb-2"></div>
                   </div>
                </div>
              </div>
            </div>
          </div>
        </div>`


            ,
            classes: 'row justify-content-end mb-0',
            style:
                {
                    margin: '10px',
                    padding: '1px 1 1 1',
                    cursor: 'pointer',
                },
            datas:
                {
                    'foo': 'bar',
                },
            events:
                {
                    click: function (data) {
                    },
                    dblclick: function (data) {
                        console.log('wrapper div element dblclicked');
                        console.log(data);
                    },
                    contextmenu: function (data) {
                        console.log('wrapper div element contextmenu');
                        console.log(data);
                    },
                }
        });
        this.homeBtn = L.control.custom({
            position: 'topleft',
            content:
                `<a class="leaflet-bar-part" title="Go to center" style="outline-style: none;">
                  <i class="ri-home-2-line" style="font-size: 20px; color: #5426B2"></i>
                </a>`

            ,
            classes: 'leaflet-bar leaflet-control',
            style:
                {
                    margin: '10px 0 0 10px',
                    padding: '1px 1 1 1',
                    cursor: 'pointer',
                },
            datas:
                {
                    'foo': 'bar',
                },
            events:
                {
                    click: function (data) {
                        floor_init.go_to_center();
                    },
                    dblclick: function (data) {
                        console.log('wrapper div element dblclicked');
                        console.log(data);
                    },
                    contextmenu: function (data) {
                        console.log('wrapper div element contextmenu');
                        console.log(data);
                    },
                }
        }).addTo(this._map);


        this.choiceFloor = L.control.custom({
            position: 'topleft',
            content:
                `<!-- Dropdown Variant -->
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-trojan dropdown-toggle border-1" style="border-color: #5426b2;" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">${floor_plan.title}</button>
                        <div class="dropdown-menu">
                            ${floors_dropdown_a()}
                            <a class="dropdown-item bg-soft-success" href="/floor-plan/add/${slug}">
                            <i class="fw-bold mdi mdi-plus align-middle"></i>
                            ${gettext("Add new plan")}
                            </a>
                        </div>
                    </div><!-- /btn-group -->`

            ,
            classes: '',
            style:
                {
                    margin: '10px 0 0 10px',
                    padding: '1px 1 1 1',
                    cursor: 'pointer',
                    position: 'absolute',
                    marginLeft: '60px',
                    width: '200px',
                },
            datas:
                {
                    'foo': 'bar',
                },
            events:
                {
                    click: function (data) {
                    },
                    dblclick: function (data) {
                        console.log('wrapper div element dblclicked');
                        console.log(data);
                    },
                    contextmenu: function (data) {
                        console.log('wrapper div element contextmenu');
                        console.log(data);
                    },
                }
        }).addTo(this._map);

        this.add = L.control.custom({
            position: 'topleft',
            content:
                `
                <div class="btn-group" role="group">
                        <a id="btnGroupDrop_{{ floor_plan.id }}" type="button"
                                class="leaflet-bar-part" data-bs-toggle="dropdown"
                                aria-expanded="false"
                                style="background-color: #fff;
                                width: 30px;
                                height: 30px;
                                line-height: 30px;
                                text-align: center;
                                border-top-left-radius: 2px;
                                border-top-right-radius: 2px;

                                        ">
                        <i class="ri-add-circle-line" style="font-size: 20px; color: #5426B2"></i>
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="btnGroupDrop_{{ floor_plan.id }}">
                          <li>
                            <a id="edit_hubs_{{ floor_plan.id }}" href="#hub_add_modal" class="dropdown-item"
                               data-bs-toggle="modal">
                              ${gettext("Хаб")}
                            </a>
                          </li>
                          <li>
                            <a id="edit_traps_{{ floor_plan.id }}" href="#my_id" class="dropdown-item"
                               data-bs-toggle="modal">
                              ${gettext("Пастка")}
                            </a>
                          </li>
                          <li>
                            <a id="vunlerability-modal-btn" href="#vunlerability-modal" class="dropdown-item"
                               data-bs-toggle="modal">
                              ${gettext("Вразливість")}
                            </a>
                          </li>
                          <li>
                            <a id="vunlerability-modal-btn" href="#collision-modal" class="dropdown-item"
                               data-bs-toggle="modal">
                              ${gettext("Зіткнення зі шкідниками")}
                            </a>
                          </li>
                        </ul>
                      </div>
    
                `

            ,
            classes: '',
            style:
                {
                    margin: '10px 0 0 10px',
                    padding: '1px 1 1 1',
                    cursor: 'pointer',
                    border: '2px solid rgba(0,0,0,0.2)',
                    borderRadius: '4px',


                },
            datas:
                {
                    'foo': 'bar',
                },
            events:
                {
                    click: function (data) {
                    },
                    dblclick: function (data) {
                        console.log('wrapper div element dblclicked');
                        console.log(data);
                    },
                    contextmenu: function (data) {
                        console.log('wrapper div element contextmenu');
                        console.log(data);
                    },
                }
        }).addTo(this._map);

        L.control.Legend({
            title: gettext("Legend"),
            position: "bottomleft",
            collapsed: true,
            legends: [
                {
                    label: gettext("Trap"),
                    type: "image",
                    url: "/static/images/encounter-icon/trap.svg",
                },
                {
                    label: gettext("Vulnerability"),
                    type: "image",
                    url: "/static/images/vulnerability-icon/vulnerability_technical_condition_red.svg",
                },
                {
                    label: gettext("Clash with pests"),
                    type: "image",
                    url: "/static/images/encounter-icon/encounter_mouse.svg",
                },
            ]
        }).addTo(this._map);
    }

    go_to_center() {
        this._map.setView(this.floor_image.getBounds().getCenter());
    }

    showContextMenu(latlng) {
    }

    updateTrapsMarkers() {
    }

    getTraps() {
    }

    make_trap_draggable(marker_id) {
        this.trapsLayer.getLayers().forEach(marker => {
            if (marker.options.id === marker_id.toString()) {
                marker.dragging.enable();
                marker.bindPopup(make_move_btn_popup(marker.options.object_data));
            }

        });
    }

    make_trap_draggable_from_modal(marker_id) {
        this.trapsLayer.getLayers().forEach(marker => {
            if (marker.options.id === marker_id.toString()) {
                marker.dragging.enable();
                marker.bindPopup(make_save_btn_popup(marker.options.object_data));
            }

        });
    }

    make_undraggable(marker_id, move_type) {
        this.trapsLayer.getLayers().forEach(marker => {
            if (marker.options.id === marker_id.toString()) {
                marker.dragging.disable();
                marker.bindPopup(make_trap_popup(marker.options.object_data));
                let new_position = marker.getLatLng();
                let x = new_position.lat;
                let y = new_position.lng;
                if (move_type === 'new_location') {
                    this.trap_location_to_bd({
                        id: marker.options.object_data.id,
                        x: x,
                        y: y,
                        floor_id: marker.options.object_data.floor,
                    });
                } else if (move_type === 'adjustment') {
                    this.trap_adjustment_to_bd({
                        id: marker.options.object_data.id,
                        x: x,
                        y: y,
                    });

                }
            }
        });
    }

    make_hub_draggable(marker_id) {
        this.hubsLayer.getLayers().forEach(marker => {
            if (marker.options.id.toString() === marker_id.toString()) {
                marker.dragging.enable();
                marker.bindPopup(make_hub_save_btn_popup(marker.options.object_data));
            }

        });
    }

    make_hub_undraggable(marker_id) {
        this.hubsLayer.getLayers().forEach(marker => {
            if (marker.options.id.toString() === marker_id.toString()) {
                marker.dragging.disable();
                marker.bindPopup(make_hub_popup(marker.options.object_data));
                let new_position = marker.getLatLng();
                let x = new_position.lat;
                let y = new_position.lng;
                this.hub_location_to_bd({
                    id: marker.options.object_data.id,
                    x: x,
                    y: y,
                    floor_id: marker.options.object_data.floor,
                });
            }
        });
    }

    make_vulnerability_undraggable(vulnerability_id) {
        this.vulnerabilitiesLayer.getLayers().forEach(marker => {
            if (marker.options.id === vulnerability_id.toString()) {
                marker.dragging.disable();
                let new_position = marker.getLatLng();
                let x = new_position.lat;
                let y = new_position.lng;
                marker.options.object_data.x_coord = x;
                marker.options.object_data.y_coord = y;
                this.vulnerability_location_to_bd(marker.options.object_data);
                marker.bindPopup(make_vulnerability_popup(marker.options.object_data));


            }
        });
    }

    make_encounter_undraggable(encounter_id) {
        this.encountersLayer.getLayers().forEach(marker => {
            if (marker.options.id === encounter_id.toString()) {
                marker.dragging.disable();
                let new_position = marker.getLatLng();
                let x = new_position.lat;
                let y = new_position.lng;
                marker.options.object_data.x_coord = x;
                marker.options.object_data.y_coord = y;
                this.encounter_location_to_bd(marker.options.object_data);
                marker.bindPopup(make_encounter_popup(marker.options.object_data));
            }
        });
    }

    show_trap_prepare_del_modal(marker_id) {
        this.trapsLayer.getLayers().forEach(marker => {
            if (marker.options.id === marker_id.toString()) {
                marker.dragging.disable();
                let trap = marker.options.object_data
                let new_modal = $(make_del_trap_modal(trap))
                $(`#delete_trap_modal`).empty();
                $(`#delete_trap_modal`).append(new_modal);
                $(`#delete_trap_modal`).modal('show');
                $(`#del_from_plan_${trap.serial_number}`).on("click", activate_continue_btn.bind(null, trap.serial_number));
                $(`#del_from_object_${trap.serial_number}`).on("click", deactivate_floor_chackbox.bind(null, trap.serial_number));
                $(`#del_${trap.serial_number}`).on("click", deactivate_floor_object_chackbox.bind(null, trap.serial_number));
                $(`#del_trap_btn_${trap.serial_number}`).on("click", deactivate_floor_object_chackbox.bind(null, trap.serial_number));
            }
        });
    }

    show_trap_del_modal(marker_id) {
        this.trapsLayer.getLayers().forEach(marker => {
            if (marker.options.id === marker_id.toString()) {
                marker.dragging.disable();

                let trap = marker.options.object_data
                let plan_chackbox = $(`#del_from_plan_${trap.serial_number}`)
                let object_chackbox = $(`#del_from_object_${trap.serial_number}`)
                let del_chackbox = $(`#del_${trap.serial_number}`)
                let msg = null
                if (del_chackbox.is(':checked')) {
                    msg = gettext(`Remove the trap completely from the system?`);
                } else if (object_chackbox.is(':checked')) {
                    msg = gettext(`Remove trap from object and plan?`);
                } else if (plan_chackbox.is(':checked')) {
                    msg = gettext(`Remove the trap from the plan but leave it on the object?`);
                }

                let new_modal = $(make_del_trap_success_modal(trap, msg))
                $(`#secondmodal`).empty();
                $(`#delete_trap_modal`).modal('hide');
                $(`#secondmodal`).append(new_modal);
                $(`#secondmodal`).modal('show');

            }
        });
    }

    trap_del(marker_id) {
        this.trapsLayer.getLayers().forEach(marker => {
            if (marker.options.id === marker_id.toString()) {
                marker.dragging.disable();
                let trap = marker.options.object_data
                let plan_chackbox = $(`#del_from_plan_${trap.serial_number}`)
                let object_chackbox = $(`#del_from_object_${trap.serial_number}`)
                let del_chackbox = $(`#del_${trap.serial_number}`)
                let delete_from = null
                if (del_chackbox.is(':checked')) {
                    this.trapsLayer.removeLayer(marker);
                    delete_from = 'all'
                } else if (object_chackbox.is(':checked')) {
                    this.trapsLayer.removeLayer(marker);
                    delete_from = 'object'
                } else if (plan_chackbox.is(':checked')) {
                    this.trapsLayer.removeLayer(marker);
                    delete_from = 'plan'
                } else {
                    delete_from = null
                }
                if (delete_from != null) {
                    this.trap_romove_from_bd(trap.serial_number, delete_from);
                }
                $(`#secondmodal`).modal('hide');

            }
        });
    }

    trap_romove_from_bd(serial_number, delete_from) {
        const csrftoken = getCookie('csrftoken');
        let data = {
            trap_serial_number: serial_number,
            delete_from: delete_from,
        };
        const url = `/object/planL/${slug}/${floor_plan.slug}/delete-trap`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseData => {
            })
            .catch(error => {
                console.error('There has been a problem with your fetch operation:', error);
            });
    }

    trap_location_to_bd(trap) {
        const csrftoken = getCookie('csrftoken');
        let data = {
            trap_id: trap.id,
            x: trap.x,
            y: trap.y,
            floor_id: trap.floor_id,
        };
        const url = `/object/planL/${slug}/${floor_plan.slug}/change-trap-location`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseData => {
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    trap_adjustment_to_bd(trap) {
        const csrftoken = getCookie('csrftoken');
        let data = {
            trap_id: trap.id,
            x: trap.x,
            y: trap.y,
            floor_id: trap.floor_id,
        };
        const url = `/object/planL/${slug}/${floor_plan.slug}/adjustment-trap-location`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseData => {
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    renderTrap(trap) {
        let now_zoom = this._map.getZoom();
        if (now_zoom < 1) {
            now_zoom = 1
        } else {
            now_zoom = now_zoom + 1;
        }

        const trapMarker = new this.customMarker([trap.x, trap.y], {
            icon: L.divIcon({
                className: 'trap-marker',
                iconSize: [20, 20],
                iconAnchor: [10, 23],
                html: trap_marker_html(trap, 15 * now_zoom, 15 * now_zoom),
            }),
            // icon: L.icon({
            //     iconUrl: '/static/images/encounter-icon/trap.svg',
            //     iconSize: [20, 40],
            //     iconAnchor: [10, 30],
            // }),
            object_data: trap,
            id: trap.number,
        });

        trapMarker.addTo(this.trapsLayer);
        trapMarker.bindPopup(make_trap_popup(trap));
        trapMarker.on('click', () => {
        });


        trapMarker.on('dragend', (event) => {
            var marker = event.target;
            var position = marker.getLatLng();
            marker.setLatLng(new L.LatLng(position.lat, position.lng), {draggable: 'true'});
            this._map.panTo(new L.LatLng(position.lat, position.lng))
        });
        if (trap.serial_number === selected_trap) {
            this._map.panTo(new L.LatLng(trap.x, trap.y))
            trapMarker.openPopup();
            blinkElement(trapMarker, 11, 500);
            console.log(trapMarker)
        }
    }

    renderTrapFromModal(trap_serial) {
        let now_zoom = this._map.getZoom();
        if (now_zoom < 1) {
            now_zoom = 1;
        } else {
            now_zoom = now_zoom + 1;
        }
        let trap = not_mounted_traps[trap_serial]
        trap.floor = floor_plan.id
        const trapMarker = new this.customMarker([0, 0], {
            icon: L.divIcon({
                className: 'trap-marker',
                iconSize: [20, 20],
                iconAnchor: [10, 23],
                html: trap_marker_html(trap, 15 * now_zoom, 15 * now_zoom),
            }),
            object_data: trap,
            id: trap.number,
        });
        $('#my_id').modal('hide');
        $(`#not_install_trap_${trap_serial}`).remove();
        trapMarker.addTo(this.trapsLayer);
        this.make_trap_draggable_from_modal(trapMarker.options.id);
        trapMarker.on('click', () => {
        });
        this._map.panTo(new L.LatLng(0, 0))


        trapMarker.on('dragend', (event) => {
            var marker = event.target;
            var position = marker.getLatLng();
            marker.setLatLng(new L.LatLng(position.lat, position.lng), {draggable: 'true'});
            this._map.panTo(new L.LatLng(position.lat, position.lng))
        });

    }

    hub_location_to_bd(hub) {
        const csrftoken = getCookie('csrftoken');
        let data = {
            hub_id: hub.id,
            x: hub.x,
            y: hub.y,
            floor_id: hub.floor_id,
        };
        const url = `/object/planL/${slug}/${floor_plan.slug}/change-hub-location`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseData => {
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    renderHub(hub) {
        let now_zoom = this._map.getZoom();
        if (now_zoom < 1) {
            now_zoom = 1
        } else {
            now_zoom = now_zoom + 1;
        }

        const hubMarker = new this.customMarker([hub.x, hub.y], {
            icon: L.divIcon({
                className: 'trap-marker',
                iconSize: [20, 20],
                iconAnchor: [10, 10],

                html: hub_marker_html(hub, 15 * now_zoom, 15 * now_zoom),
            }),
            object_data: hub,
            id: hub.number,
        });

        hubMarker.addTo(this.hubsLayer);
        hubMarker.bindPopup(make_hub_popup(hub));
        hubMarker.on('click', () => {
        });
        if (hub.serial_number === selected_hub) {
            this._map.panTo(new L.LatLng(hub.x, hub.y));
            blinkElement(hubMarker, 11, 500);
            hubMarker.openPopup();
        }

        hubMarker.on('dragend', (event) => {
            var marker = event.target;
            var position = marker.getLatLng();
            marker.setLatLng(new L.LatLng(position.lat, position.lng), {draggable: 'true'});
            this._map.panTo(new L.LatLng(position.lat, position.lng))
        });

    }

    renderHubFromModal(hub_serial) {
        let now_zoom = this._map.getZoom();
        if (now_zoom < 1) {
            now_zoom = 1;
        } else {
            now_zoom = now_zoom + 1;
        }
        let hub = not_mounted_hubs.find(obj => obj.serial_number === hub_serial);
        console.log(hub);
        hub.floor = this.floor_id;
        const hubMarker = new this.customMarker([hub.x, hub.y], {
            icon: L.divIcon({
                className: 'trap-marker',
                iconSize: [20, 20],
                iconAnchor: [10, 10],

                html: hub_marker_html(hub, 15 * now_zoom, 15 * now_zoom),
            }),
            object_data: hub,
            id: hub.number,
        });
        $('#hub_add_modal').modal('hide');
        $(`#not_install_hub_${hub_serial}`).remove();
        hubMarker.addTo(this.hubsLayer);
        this.make_hub_draggable(hubMarker.options.id);
        hubMarker.on('click', () => {
        });
        this._map.panTo(new L.LatLng(hub.x, hub.y));


        hubMarker.on('dragend', (event) => {
            var marker = event.target;
            var position = marker.getLatLng();
            marker.setLatLng(new L.LatLng(position.lat, position.lng), {draggable: 'true'});
            this._map.panTo(new L.LatLng(position.lat, position.lng));
        });

    }

    show_hub_prepare_del_modal(marker_id) {
        this.hubsLayer.getLayers().forEach(marker => {
            if (marker.options.id === marker_id.toString()) {
                marker.dragging.disable();
                let hub = marker.options.object_data
                let new_modal = $(make_del_hub_modal(hub))
                $(`#delete_trap_modal`).empty();
                $(`#delete_trap_modal`).append(new_modal);
                $(`#delete_trap_modal`).modal('show');
                $(`#del_from_plan_${hub.serial_number}`).on("click", activate_continue_btn.bind(null, hub.serial_number));
                $(`#del_from_object_${hub.serial_number}`).on("click", deactivate_floor_chackbox.bind(null, hub.serial_number));
                $(`#del_${hub.serial_number}`).on("click", deactivate_floor_object_chackbox.bind(null, hub.serial_number));
                $(`#del_trap_btn_${hub.serial_number}`).on("click", deactivate_floor_object_chackbox.bind(null, hub.serial_number));
            }
        });
    }

    show_hub_del_modal(marker_id) {
        this.hubsLayer.getLayers().forEach(marker => {
            if (marker.options.id === marker_id.toString()) {
                marker.dragging.disable();

                let hub = marker.options.object_data;
                let plan_chackbox = $(`#del_from_plan_${hub.serial_number}`);
                let object_chackbox = $(`#del_from_object_${hub.serial_number}`);
                let del_chackbox = $(`#del_${hub.serial_number}`);
                let msg = null;
                if (del_chackbox.is(':checked')) {
                    msg = gettext(`Remove hub completely from the system?`);
                } else if (object_chackbox.is(':checked')) {
                    msg = gettext(`Remove hub from object and plan?`);
                } else if (plan_chackbox.is(':checked')) {
                    msg = gettext(`Remove the hub from the plan but leave it on the object?`);
                }

                let new_modal = $(make_del_hub_success_modal(hub, msg));
                $(`#secondmodal`).empty();
                $(`#delete_trap_modal`).modal('hide');
                $(`#secondmodal`).append(new_modal);
                $(`#secondmodal`).modal('show');

            }
        });
    }

    hub_del(marker_id) {
        this.hubsLayer.getLayers().forEach(marker => {
            if (marker.options.id === marker_id.toString()) {
                marker.dragging.disable();
                let hub = marker.options.object_data;
                let plan_chackbox = $(`#del_from_plan_${hub.serial_number}`);
                let object_chackbox = $(`#del_from_object_${hub.serial_number}`);
                let del_chackbox = $(`#del_${hub.serial_number}`);
                let delete_from = null;
                if (del_chackbox.is(':checked')) {
                    this.hubsLayer.removeLayer(marker);
                    delete_from = 'all';
                } else if (object_chackbox.is(':checked')) {
                    this.hubsLayer.removeLayer(marker);
                    delete_from = 'object';
                } else if (plan_chackbox.is(':checked')) {
                    this.hubsLayer.removeLayer(marker);
                    delete_from = 'plan';
                } else {
                    delete_from = null;
                }
                if (delete_from != null) {
                    this.hub_romove_from_bd(hub.id, delete_from);
                }
                $(`#secondmodal`).modal('hide');

            }
        });
    }

    hub_romove_from_bd(hub_id, delete_from) {
        const csrftoken = getCookie('csrftoken');
        let data = {
            hub_id: hub_id,
            delete_from: delete_from,
        };
        const url = `/object/planL/${slug}/${floor_plan.slug}/delete-hub`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseData => {
            })
            .catch(error => {
                console.error('There has been a problem with your fetch operation:', error);
            });
    }

    vulnerability_location_to_bd(vulnerability) {
        const csrftoken = getCookie('csrftoken');
        let data = {
            category: vulnerability.category,
            criticality: vulnerability.criticality,
            service: vulnerability.service,
            pest: vulnerability.pest,
            zone: vulnerability.zone,
            inspector: vulnerability.inspector,
            discovered: vulnerability.discovered,
            responsible: vulnerability.responsible,
            x_coord: vulnerability.x_coord,
            y_coord: vulnerability.y_coord,
            floor: floor_plan.id,
        };
        const url = `/object/planL/${slug}/${floor_plan.slug}/change-vulnerability-location`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseData => {
                console.log(responseData.data);
                this.vulnerabilitiesLayer.getLayers().forEach(marker => {
                    if (marker.options.id === vulnerability.id.toString()) {
                        marker.options.id = responseData.data.id;

                        vulnerability.id = responseData.data.id;
                        marker.bindPopup(make_vulnerability_popup(vulnerability));
                        console.log(vulnerability);
                        this.vulnerability_photo_to_bd(vulnerability);
                    }
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    vulnerability_photo_to_bd(vulnerability) {
        const csrftoken = getCookie('csrftoken');
        let data = {
            encounter_id: vulnerability.id,
            photos: vulnerability.photo,
        };
        const url = `/vulnerabilities/add_vulnerability_photo`;
        const formData = new FormData();
        const selectedFiles = vulnerability.photo;

        for (let i = 0; i < selectedFiles.length; i++) {
            formData.append("file", selectedFiles[i]);
        }
        formData.append("id", vulnerability.id);

        fetch(url, {
            method: 'POST',
            headers: {
                'X-CSRFToken': csrftoken,
            },
            body: formData,
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseData => {
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    renderVulnerability(vulnerability) {
        let now_zoom = this._map.getZoom();
        if (now_zoom < 1) {
            now_zoom = 1;
        } else {
            now_zoom = now_zoom + 1;
        }


        // if (vulnerability.id === selected_vulnerability) {
        //     this._map.panTo(new L.LatLng(vulnerability.x, vulnerability.y))
        // }
        let icon_url = get_vulnarability_icon(vulnerability);
        const vulnerabilityMarker = new this.customMarker([vulnerability.x_coord, vulnerability.y_coord], {
            icon: L.icon({
                iconUrl: icon_url,
                iconSize: [38, 38],
                iconAnchor: [19, 19],
            }),
            object_data: vulnerability,
            id: vulnerability.id,
        });
        console.log(vulnerability);
        if (vulnerability.fixed === "True") {
            vulnerabilityMarker.options.opacity = 0.5;
            vulnerabilityMarker.addTo(this.archive_vulnerabilitiesLayer);
        } else {
            vulnerabilityMarker.options.opacity = 1;
            vulnerabilityMarker.addTo(this.vulnerabilitiesLayer);
        }
        vulnerabilityMarker.bindPopup(make_vulnerability_popup(vulnerability));
        if (vulnerability.id === selected_vulnerability) {
            this._map.panTo(new L.LatLng(vulnerability.x_coord, vulnerability.y_coord))
            blinkElement(vulnerabilityMarker, 11, 500);
            vulnerabilityMarker.openPopup();
        }
        vulnerabilityMarker.on('click', () => {
        });


        vulnerabilityMarker.on('dragend', (event) => {
            var marker = event.target;
            var position = marker.getLatLng();
            marker.setLatLng(new L.LatLng(position.lat, position.lng), {draggable: 'true'});
            this._map.panTo(new L.LatLng(position.lat, position.lng))
        });

    }

    renderVulnerabilityFromModal() {
        let form = $('#form-vulnerabilities');
        let vulnerabilities_category = form.find(`#vulnerabilities_category`).val();
        let vulnerabilities_criticality = form.find(`#vulnerabilities_criticality`).val();
        let vulnerabilities_service = form.find(`#vulnerabilities_service`).val();
        let vulnerabilities_pest = form.find(`#vulnerabilities_pest`).val();
        let vulnerabilities_zone = form.find(`#vulnerabilities_zone`).val();
        let vulnerabilities_inspector = form.find(`#vulnerabilities_inspector`).val();
        let vulnerabilities_discovered = form.find(`#vulnerabilities_discovered`).val();
        let vulnerabilities_responsible = form.find(`#vulnerabilities_responsible`).val();

        let vulnerability = {
            id: generateRandomString(),
            category: vulnerabilities_category,
            criticality: vulnerabilities_criticality,
            service: vulnerabilities_service,
            pest: vulnerabilities_pest,
            zone: vulnerabilities_zone,
            inspector: vulnerabilities_inspector,
            discovered: vulnerabilities_discovered,
            responsible: vulnerabilities_responsible,
            x_coord: '0',
            y_coord: '0',
            floor: floor_plan.id,
            photo: dropzoneVulnerability.files,
        };
        form.trigger("reset");
        dropzoneVulnerability.removeAllFiles();
        console.log(vulnerability);
        let icon_url = get_vulnarability_icon(vulnerability);
        const vulnerabilityMarker = new this.customMarker([vulnerability.x_coord, vulnerability.y_coord], {
            icon: L.icon({
                iconUrl: icon_url,
                iconSize: [38, 38],
                iconAnchor: [19, 19],
            }),
            object_data: vulnerability,
            id: vulnerability.id,
        });

        $('#vunlerability-modal').modal('hide');
        vulnerabilityMarker.addTo(this.vulnerabilitiesLayer);
        vulnerabilityMarker.bindPopup(make_vulnerability_save_btn_popup(vulnerability));
        vulnerabilityMarker.dragging.enable();
        vulnerabilityMarker.on('click', () => {
        });
        this._map.panTo(new L.LatLng(vulnerability.x_coord, vulnerability.y_coord))

        vulnerabilityMarker.on('dragend', (event) => {
            var marker = event.target;
            var position = marker.getLatLng();
            marker.setLatLng(new L.LatLng(position.lat, position.lng), {draggable: 'true'});
            this._map.panTo(new L.LatLng(position.lat, position.lng))
        });

    }

    encounter_location_to_bd(encounter) {
        const csrftoken = getCookie('csrftoken');
        let data = {
            discovery_date: encounter.discovery_date,
            discovery_time: encounter.discovery_time,
            enc_type: encounter.enc_type,
            comment: encounter.comment,
            inspector: encounter.inspector,
            place: encounter.place,
            pest: encounter.pest,
            amount: encounter.amount,
            pest_traces: encounter.pest_traces,
            witness: encounter.witness,
            x_coord: encounter.x_coord,
            y_coord: encounter.y_coord,
        };
        const url = `/object/planL/${slug}/${floor_plan.slug}/change-encounter-location`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseData => {
                console.log(responseData.data);
                this.encountersLayer.getLayers().forEach(marker => {
                    if (marker.options.id === encounter.id.toString()) {
                        console.log(marker);
                        marker.options.id = responseData.data.id;
                        encounter.id = responseData.data.id;
                        marker.bindPopup(make_encounter_popup(encounter));
                    }

                });
                this.encounter_photo_to_bd(encounter);

            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    encounter_photo_to_bd(encounter) {
        const csrftoken = getCookie('csrftoken');
        let data = {
            encounter_id: encounter.id,
            photos: encounter.photo,
        };
        const url = `/journal_encounters/add_encounter_photo`;
        const formData = new FormData();
        const selectedFiles = encounter.photo;

        for (let i = 0; i < selectedFiles.length; i++) {
            formData.append("file", selectedFiles[i]);
        }
        formData.append("id", encounter.id);

        fetch(url, {
            method: 'POST',
            headers: {
                'X-CSRFToken': csrftoken,
            },
            body: formData,
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(responseData => {
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    renderEncounter(encounter) {
        let now_zoom = this._map.getZoom();
        if (now_zoom < 1) {
            now_zoom = 1
        } else {
            now_zoom = now_zoom + 1;
        }
        console.log(encounter.id);
        console.log(selected_encounter);


        // if (vulnerability.id === selected_vulnerability) {
        //     this._map.panTo(new L.LatLng(vulnerability.x, vulnerability.y))
        // }
        let icon_url = null;

        if (encounter.pest__pest_type === "гризуни" || encounter.pest__pest_type === "RO") {
            icon_url = '/static/images/encounter-icon/encounter_mouse.svg';
        } else if (encounter.pest__pest_type === "CI") {
            icon_url = '/static/images/encounter-icon/encounter_cockroach.svg';
        } else {
            icon_url = '/static/images/encounter-icon/encounter_cockroach.svg';
        }
        const encounterMarker = new this.customMarker([encounter.x_coord, encounter.y_coord], {
            // icon: L.divIcon({
            //     className: 'trap-marker',
            //     iconSize: [20, 20],
            //     html: encounter_marker_html(encounter, 15*now_zoom, 15*now_zoom),
            // }),
            icon: L.icon({
                iconUrl: icon_url,
                iconSize: [42, 42],
                iconAnchor: [21, 21],
            }),
            object_data: encounter,
            id: encounter.id,
        });
        // if (vulnerability.fixed === "True") {
        //     vulnerabilityMarker.options.opacity = 0;
        //     vulnerabilityMarker.addTo(this.vulnerabilitiesArchiveLayer);
        // }else{
        //     vulnerabilityMarker.addTo(this.vulnerabilitiesLayer);
        // }
        encounterMarker.bindPopup(make_encounter_popup(encounter));
        if(encounter.inspection_date){
            encounterMarker.options.opacity = 0.5;
            encounterMarker.addTo(this.archive_encountersLayer);
        }else{
            encounterMarker.options.opacity = 100;
            encounterMarker.addTo(this.encountersLayer);
        }
        encounterMarker.on('click', () => {
        });
        if (encounter.id.toString() === selected_encounter) {
            this._map.panTo(new L.LatLng(encounter.x_coord, encounter.y_coord))
            blinkElement(encounterMarker, 11, 500);
            encounterMarker.openPopup();
        }

        encounterMarker.on('dragend', (event) => {
            var marker = event.target;
            var position = marker.getLatLng();
            marker.setLatLng(new L.LatLng(position.lat, position.lng), {draggable: 'true'});
            this._map.panTo(new L.LatLng(position.lat, position.lng))
        });

    }

    renderEncounterFromModal() {
        let form = $('#form-encounter');
        let discovery_date = form.find(`#discovery_date`).val();
        let discovery_time = form.find(`#discovery_time`).val();
        let enc_type = form.find(`#enc_type`).val();
        let enc_comment = form.find(`#enc_comment`).val();
        let inspector = form.find(`#enc_inspector`).val();
        let place = form.find(`#place`).val();
        let pest = form.find(`#pest`).val();
        console.log(pest);
        let amount = form.find(`#amount`).val();
        let pest_traces = form.find(`#pest_traces`).val();
        let witness = form.find(`#witness`).val();

        let encounter = {
            id: generateRandomString(),
            discovery_date: discovery_date,
            discovery_time: discovery_time,
            enc_type: enc_type,
            comment: enc_comment,
            inspector: inspector,
            place: place,
            pest: pest,
            amount: amount,
            pest_traces: pest_traces,
            witness: witness,
            x_coord: '0',
            y_coord: '0',
            floor: floor_plan.id,
            photo: dropzoneEncounter.files,
        };
        form.trigger("reset");
        dropzoneEncounter.removeAllFiles();
        console.log(encounter);
        let icon_url = null;
        if (encounter.pest === "2") {
            icon_url = '/static/images/encounter-icon/encounter_mouse.svg';
        } else if (encounter.pest === "3") {
            icon_url = '/static/images/encounter-icon/encounter_cockroach.svg';
        } else {
            icon_url = '/static/images/encounter-icon/encounter_cockroach.svg';
        }
        ;
        console.log(encounter_marker_html(encounter, 15, 15));
        const encounterMarker = new this.customMarker([encounter.x_coord, encounter.y_coord], {
            icon: L.icon({
                iconUrl: icon_url,
                iconSize: [42, 42],
                iconAnchor: [21, 21],
            }),
            object_data: encounter,
            id: encounter.id,
        });

        $('#collision-modal').modal('hide');
        encounterMarker.addTo(this.encountersLayer);
        encounterMarker.bindPopup(make_encounter_save_btn_popup(encounter));
        encounterMarker.dragging.enable();
        encounterMarker.on('click', () => {
        });
        this._map.panTo(new L.LatLng(encounter.x_coord, encounter.y_coord))

        encounterMarker.on('dragend', (event) => {
            var marker = event.target;
            var position = marker.getLatLng();
            marker.setLatLng(new L.LatLng(position.lat, position.lng), {draggable: 'true'});
            this._map.panTo(new L.LatLng(position.lat, position.lng))
        });

    }

    renderTrapR(trap) {
        let now_zoom = this._map.getZoom();
        if (now_zoom < 1) {
            now_zoom = 1;
        } else {
            now_zoom = now_zoom + 1;
        }
        let trapMarker = L.rectangle([[38, 38], [50, 50]], {
            color: "rgb(0,0,0)",
            weight: 1,
            fillColor: "rgb(74,201,95)",
            fillOpacity: 0.8,
            draggable: true
        });
        trapMarker.bindPopup(`<b>${trap.number}</b><br>${trap.model}`);
        trapMarker.on('click', () => {
        });

        trapMarker.on('dragend', (event) => {

        });
        // trapMarker.bindTooltip("my tooltip text", {permanent: true, direction: "center", opacity: 1}).openTooltip();
        trapMarker.addTo(this.trapsLayer);

        const test_divOverlay = L.divOverlay({
            className: 'trap-marker',
            content: trap_marker_html(trap, 10 * now_zoom, 10 * now_zoom),
        });

        test_divOverlay.addTo(this.trapsLayer);

    }

    reRenderTrap() {
        let now_zoom = this._map.getZoom();
        if (now_zoom < 1) {
            now_zoom = 1;
        } else {
            now_zoom = now_zoom + 1;
        }
        this.trapsLayer.getLayers().forEach(marker => {
            // marker.options.icon.html = trap_marker_html(marker.options.icon.options.object_data, 10*now_zoom, 10*now_zoom);
            let icon = marker.getIcon();
            icon.options.html = trap_marker_html(marker.options.icon.options.object_data, 10 * now_zoom, 10 * now_zoom);
            // icon.update();
            marker.setIcon(icon);
            marker.update();
        });
        // const trapMarker = L.marker([trap.x/this._scale, trap.y/this._scale], {
        //     icon: L.divIcon({
        //         className: 'trap-marker',
        //         iconSize: [20, 20],
        //         html: trap_marker_html(trap),
        //     riseOnHover: true,
        //     draggable: true,
        //     }),
        // });
        // trapMarker.bindPopup(`<b>${trap.number}</b><br>${trap.model}`);
        // trapMarker.on('click', () => {
        // });

        // trapMarker.addTo(this.trapsLayer);
    }

    filter_traps() {
        let is_chacked = $("#hide_traps").is(":checked");
        console.log(is_chacked);
        if (is_chacked) {
            this.trapsLayer.getLayers().forEach(marker => {
                marker.setOpacity(1);
            });
            this.hubsLayer.getLayers().forEach(marker => {
                marker.setOpacity(1);
            });
        } else {
            this.trapsLayer.getLayers().forEach(marker => {
                marker.setOpacity(0);
            });
            this.hubsLayer.getLayers().forEach(marker => {
                marker.setOpacity(0);
            });
        }
    }

    filter_heatmap() {
        let is_chacked = $("#hide_heatmap").is(":checked");
        if (is_chacked) {
           this.choiceDate.addTo(this._map);
           rangeSliderInit();
           $(`#heatmap_date_from`).on('change', function () {
                get_ppas();
            });
            $(`#heatmap_date_to`).on('change', function () {
                get_ppas();
            });
        } else {
            if (this._map.hasLayer(this.heatmap)) {
                this.heatmap.setData({data: []});
                this.heatmap.remove();
                this.choiceDate.remove();
            } else {
                return;
            }
        }
    }

    filter_vulnerabilities() {
        let is_chacked = $("#hide_vulnerabilities").is(":checked");
        if (is_chacked) {
            this.vulnerabilitiesLayer.getLayers().forEach(marker => {
                marker.setOpacity(1);
            });
        } else {
            this.vulnerabilitiesLayer.getLayers().forEach(marker => {
                marker.setOpacity(0);
            });
        }
    }

    filter_encounters() {
        let is_chacked = $("#hide_encounters").is(":checked");
        if (is_chacked) {
            this.encountersLayer.getLayers().forEach(marker => {
                marker.setOpacity(1);
            });
        } else {
            this.encountersLayer.getLayers().forEach(marker => {
                marker.setOpacity(0);
            });
        }
    }

    filter_archive() {
        let is_chacked = $("#hide_archive").is(":checked");
        if (is_chacked) {
            this.archive_encountersLayer.addTo(this._map);
            this.archive_vulnerabilitiesLayer.addTo(this._map);
        } else {
            this.archive_encountersLayer.remove();
            this.archive_vulnerabilitiesLayer.remove(this._map);

        }
    }


}

function get_ppas() {
    const csrftoken = getCookie('csrftoken');
    let date_start = $('#heatmap_date_from').val();
    let date_end = $('#heatmap_date_to').val(); // 2021-01-01
    let data = {
        date_start: date_start,
        date_end: date_end,
    };
    const url = `/object/planL/${slug}/${floor_plan.slug}/get_ppas_per_date`;
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': csrftoken,
        },
        body: JSON.stringify(data),
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(responseData => {
            console.log(responseData);
            floor_init.heat_data = responseData.data;
            floor_init.heatmap.setData({max:10, data: responseData.data});
            floor_init.heatmap.addTo(floor_init._map);
        })
        .catch(error => {
            console.error('Error:', error);
        });


}

function main() {


    floor_init = new FloorPlan(floor_plan.id, floor_plan.url, floor_plan.scale, floor_plan.width, floor_plan.height, floor_plan.traps, floor_plan.hubs, floor_plan.vulnerability, floor_plan.encounters);
    floor_init.init();
    $(`#hide_traps`).on('click', function () {
        floor_init.filter_traps();
    });
    $(`#hide_vulnerabilities`).on('click', function () {
        floor_init.filter_vulnerabilities();
    });
    $(`#hide_encounters`).on('click', function () {
        floor_init.filter_encounters();
    });
    $(`#hide_heatmap`).on('click', function () {
        floor_init.filter_heatmap();
    });
    $(`#hide_archive`).on('click', function () {
        floor_init.filter_archive();
    });


    // $(`#btn_accordion_2`).on('click', function () {
    //     let slider_container = $(`#slider_container`);
    //     slider_container.html(`${slider_container.html()}<div id="soft"></div>`);
    // }
    // );

}

document.addEventListener('DOMContentLoaded', function () {
    main();

}, false);

$(".minimize-card").on('click', function () {
    var $this = $(this);
    var port = $($this.parents('.card'));
    var card = $(port).children('.card-block').slideToggle();

    $(this).toggleClass("fa-minus").fadeIn('slow');
    $(this).toggleClass("fa-plus").fadeIn('slow');
});
$(".full-card").on('click', function () {
    var $this = $(this);
    var port = $($this.parents('.card'));
    var container = $('#container').css('height', '80vh');
    port.toggleClass("full-card");
});

// async function blinkElement(element, times, delay) {
//     let opacity = 1;
//     const interval = setInterval(() => {
//         opacity = opacity === 1 ? 0 : 1;
//         element.setOpacity(opacity);
//     }, delay);
//     setTimeout(() => {
//         clearInterval(interval);
//     }, times);
// }

async function blinkElement(element, times, delay) {
    let blinking = true;

    element._icon.classList.add('blinking');

    const interval = setInterval(() => {
        if (blinking) {
            blinking = false;
            element.setOpacity(0);
        } else {
            blinking = true;
            element.setOpacity(1);
        }
    }, delay);

    setTimeout(() => {
        clearInterval(interval);

        element._icon.classList.remove('blinking');

        element.setOpacity(1);
    }, delay * times);
}
